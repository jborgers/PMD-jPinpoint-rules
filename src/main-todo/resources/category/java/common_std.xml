<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="jpinpoint-common_std-rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>jPinpoint rule set for performance aware Java coding, sponsored by Rabobank.</description>
<!--
    <rule name="AvoidUnusedAssignments"
          language="java"
          message="Avoid assignments for which the assigned value is never used."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr04">
        <description>Problem: Assignments to variables for which the assigned value is not used because a new value is assigned before actual use, is unnecessary work and may indicate a bug.
            Solution: remove the first assignment and make sure that is as intended.
        </description>
        <priority>3</priority>
        <properties>
            <property name="tags" value="jpinpoint-rule,replaces-sonar-rule,suspicious,unused" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
(: for each assignment node :)
(for $node in //StatementExpression[AssignmentOperator[@Image='=']][not(ancestor::IfStatement or ancestor::TryStatement or ancestor::SwitchStatement)]/PrimaryExpression/PrimaryPrefix/Name
(: match if for that node the next occurrence of ((assignment without use in same statement) union with (use) is an assignment to the var) :)
return ($node[
(: assignment without use, Name is result :)
((ancestor::BlockStatement/following-sibling::BlockStatement//StatementExpression[AssignmentOperator[@Image='=']][not(ancestor::IfStatement or ancestor::TryStatement or ancestor::SwitchStatement)]/PrimaryExpression/PrimaryPrefix/Name[@Image=$node/@Image]
[not(ancestor::BlockStatement//PrimaryExpression[not(../AssignmentOperator[@Image='=']) and (not(PrimarySuffix/Arguments) or PrimaryPrefix[contains(Name/@Image, '.')])]
/PrimaryPrefix[substring-before(concat(Name/@Image, '.'), '.')=$node/@Image])]
)[1]
|
(: use, PrimaryPrefix is result, so @Image is empty string :)
(ancestor::BlockStatement/following-sibling::BlockStatement//PrimaryExpression[not(../AssignmentOperator[@Image='='] and not(PrimarySuffix/Expression)) and (not(PrimarySuffix/Arguments) or PrimaryPrefix[contains(Name/@Image, '.')])]
/PrimaryPrefix[substring-before(concat(Name/@Image, '.'), '.')=$node/@Image])[1])
(: first is the var name :)
[1]/@Image = $node/@Image])
)
,
(: for each local variable declaration :)
(for $node in (//LocalVariableDeclaration/VariableDeclarator[VariableInitializer]//VariableDeclaratorId)
(: match if for that node the next occurrence of ((assignment without use in same statement) union with (use) is an assignment to the var) :)
return ($node[
(: assignment without use, Name is result :)
((ancestor::BlockStatement/following-sibling::BlockStatement//StatementExpression[AssignmentOperator[@Image='=']][not(ancestor::IfStatement or ancestor::TryStatement or ancestor::SwitchStatement)]/PrimaryExpression/PrimaryPrefix/Name[@Image=$node/@Name]
[not(ancestor::BlockStatement//PrimaryExpression[not(../AssignmentOperator[@Image='=']) and (not(PrimarySuffix/Arguments) or PrimaryPrefix[contains(Name/@Image, '.')])]
/PrimaryPrefix[substring-before(concat(Name/@Image, '.'), '.')=$node/@Name])]
)[1]
|
(: use, PrimaryPrefix is result, so @Image is empty string :)
(ancestor::BlockStatement/following-sibling::BlockStatement//PrimaryExpression[not(../AssignmentOperator[@Image='='] and not(PrimarySuffix/Expression)) and (not(PrimarySuffix/Arguments) or PrimaryPrefix[contains(Name/@Image, '.')])]
/PrimaryPrefix[substring-before(concat(Name/@Image, '.'), '.')=$node/@Name])[1])
(: first is the var name :)
[1]/@Image = $node/@Name])
)
                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[

            ]]>
        </example>
    </rule>
    -->
</ruleset>
