<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid SpringMVCMemoryLeaks AdditiveTest</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>38</expected-linenumbers>
        <code><![CDATA[
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Controller
public class AvoidSpringMVCMemoryLeaks1 {

    @RequestMapping(value = "/goodExample1", method = RequestMethod.POST)
    public RedirectView goodExample1(@RequestParam("someAttribute") String someAttribute, Model model) {
        model.addAttribute("attributeName", someAttribute);
        return new RedirectView("redirectedUrl", true);
    }

    @RequestMapping(value = "/goodExample2", method = RequestMethod.POST)
    public String goodExample2(@RequestParam("someAttribute") String someAttribute, Model model) {
        model.addAttribute("someAttribute",someAttribute);
        return "redirect:/redirectUrl";
    }

    @RequestMapping(value = "/goodExample3", method = RequestMethod.POST)
    public String goodExample3(@RequestParam("someAttribute") String someAttribute, Model model) {
        model.addAttribute("someAttribute",someAttribute);
        return "redirect:/redirectUrl?someAttribute={someAttribute}";
    }

    @RequestMapping(value = "/badExample", method = RequestMethod.POST)
    public String badExample(@RequestParam("someAttribute") String someAttribute, Model model) {
        model.addAttribute("someAttribute",someAttribute);
        return "redirect:/redirectUrl?someAttribute=" + someAttribute; // bad
    }
}
       ]]></code>
    </test-code>
    <test-code>
        <description>Avoid AvoidSpringMVCMemoryLeaks ModelAndViewTests</description>
        <expected-problems>12</expected-problems>
        <expected-linenumbers>48, 51, 52, 54, 55, 57, 58, 61, 62, 80, 81, 82</expected-linenumbers>
        <code><![CDATA[
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

@Controller
public class AvoidSpringMVCMemoryLeaks2 {

    private static final String STATIC_FINAL_FIELD = "STATIC FINAL LITERAL";

    @Value("${some.injected.value}")
    private String someInjectedValue;

    @RequestMapping(value = {STATIC_FINAL_FIELD, STATIC_FINAL_FIELD}, method = RequestMethod.GET)
    public void getAuthenticateRequestGood(
            @RequestHeader(value = "agent", required = false) String userAgent,
            HttpServletResponse response) throws IOException {
        response.addCookie(new Cookie("userAgent", userAgent));
        response.sendRedirect(STATIC_FINAL_FIELD); // good
    }

    private static String STATIC_NON_FINAL_FIELD = "STATIC LITERAL";
    private String someClassVar = "";

    @RequestMapping(value={STATIC_FINAL_FIELD, STATIC_FINAL_FIELD}, method = RequestMethod.GET )
    public ModelAndView getSomeRequest(
            @RequestParam(value = "SOME_VALUE", required = false) int someValue,
            @RequestParam(value = "SOME_OTHER_VALUE", required = false) final String someOtherValue)
    {
        String someVar = redirectToSomewhere(STATIC_FINAL_FIELD, someOtherValue);
        final String SOME_LOCAL = someOtherValue + "xxx";
        ModelMap modelMap = new ModelMap();
        Object messageSource = new Object();
        modelMap.put("texts", messageSource);
        ModelAndView model = new ModelAndView();
        switch (someValue) {
            case 10: model.setViewName(STATIC_FINAL_FIELD); break;                                  // good
            case 11: model.setViewName(SOME_LOCAL); break;                                          // bad 1
            case 12: return new ModelAndView(STATIC_FINAL_FIELD);                                   // good

            case 15: model.setViewName(STATIC_NON_FINAL_FIELD); break;                              // bad 2
            case 16: return new ModelAndView(STATIC_NON_FINAL_FIELD);                               // bad 3

            case 20: model.setViewName(someVar); break;                                             // bad 4
            case 21: return new ModelAndView(someVar);                                              // bad 5

            case 30: model.setViewName(redirectToSomewhere(STATIC_FINAL_FIELD, someOtherValue)); break; // bad 6
            case 31: return new ModelAndView(                                                           // bad 7
                    redirectToSomewhere(STATIC_FINAL_FIELD, someOtherValue));

            case 40: model.setViewName(redirectToSomewhere(STATIC_FINAL_FIELD, someClassVar)); break;   // bad 8
            case 41: return new ModelAndView(                                                           // bad 9
                    redirectToSomewhere(STATIC_FINAL_FIELD, someClassVar));

            case 50: return new ModelAndView("viewName", modelMap);                                 // good
        }
        return model;
    }

    private String redirectToSomewhere(String... args) {
        return STATIC_FINAL_FIELD + STATIC_NON_FINAL_FIELD + someClassVar + someInjectedValue;
    }

    @RequestMapping(value = STATIC_FINAL_FIELD, method = RequestMethod.GET)
    public ModelAndView getFollowupRequest(
            @CookieValue(value = "someValue", required = false) String idpFollowupCookieString) {
        ModelAndView model = new ModelAndView();
        model.addObject(idpFollowupCookieString);
        model.setViewName("followup." + "simplifiedABitForCodeChecks");                            // good
        model.setViewName(idpFollowupCookieString + "simplifiedABitForCodeChecks");                // bad 10
        model.setViewName("simplifiedABitForCodeChecks" + idpFollowupCookieString);                // bad 11
        model.setViewName(idpFollowupCookieString);                                                // bad 12
        return model;
    }
}
         ]]></code>
    </test-code>
    <test-code>
        <description>Avoid SpringMVCMemoryLeaks Issue #33 </description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class Foo {

    @RequestMapping(value = "/info/all", method = RequestMethod.GET)
    public ResponseEntity agentInfoAll() {
        String result = getAllServers()
            .stream()
            .filter(server -> !server.startsWith(GROUP_OF_SERVERS_PREFIX))
            .map(server -> {
                CompletableFuture<ResponseEntity<String>> futureResponse =
                        CompletableFuture.supplyAsync(() -> agentClient.pingAgent(server), executor);
                ResponseEntity<String> response = futureResponse
                        .handle((res, ex) -> (res != null) ? res : ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error pinging server: " + ex.getMessage()))
                        .join();
                return server + " : " + buildStatus(response) + "\n" + response.getBody() + "\n\n";
            })
            .collect(Collectors.joining());

    return ResponseEntity.ok().contentType(MediaType.TEXT_PLAIN).body(Pattern.compile("\n{2,}").matcher(result).replaceAll("\n\n"));
    }
}
     ]]></code>
    </test-code>
</test-data>
