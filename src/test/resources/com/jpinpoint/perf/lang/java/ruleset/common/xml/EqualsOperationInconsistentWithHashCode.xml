<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: equalsIgnoreCase field2 only in equals</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>10</expected-linenumbers>
        <code><![CDATA[
class Bad1 { // equalsIgnoreCase
    String field1;
    String field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Bad1 that = (Bad1) o;
        if (field1 != null ? !field1.equals(that.field1) : that.field1 != null) return false;
        return field2 != null ? field2.equalsIgnoreCase(that.field2) : that.field2 == null; // ignore case, bad
    }
    public int hashCode() {
        int result = field1 != null ? field1.hashCode() : 0;
        result = 31 * result + (field2 != null ? field2.hashCode() : 0);
        return result;
    }
}

class Good {
    String field1, field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Good that = (Good) o;
        return Objects.equals(field1, that.field1) &&
                Objects.equals(field2.toUpperCase(), that.field2.toUpperCase()); // ignore case
    }
    public int hashCode() {
        return Objects.hash(field1, field2.toUpperCase()); // ignore case
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: lowercase field2 only in equals, java7 notation</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>10,10</expected-linenumbers>
        <code><![CDATA[
class Bad2 {
    String field1;
    String field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Bad2 that = (Bad2) o;
        return Objects.equals(field1, that.field1) &&
                Objects.equals((field2.toLowerCase()), that.field2.toLowerCase()); //bad 2x
    }
    public int hashCode() {
        return Objects.hash(field1, field2);
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: lowercase/uppercase mismatches</description>
        <expected-problems>7</expected-problems>
        <expected-linenumbers>9,9,10,10,25,25,41</expected-linenumbers>
        <code><![CDATA[
        class Bad1 {
    String field1;
    String field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Bad1 that = (Bad1) o;
        return Objects.equals(field1.toUpperCase(), that.field1.toUpperCase()) && // bad 2x
                Objects.equals((field2.toLowerCase()), that.field2.toLowerCase()); // bad 2x
    }
    public int hashCode() {
        return Objects.hash(field1, field2);
    }
}

class Bad2 {
    String field1;
    String field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Bad2 that = (Bad2) o;
        return Objects.equals(field1.toUpperCase(), that.field1.toUpperCase()) && // bad 2x
                Objects.equals((field2.toLowerCase()), that.field2.toLowerCase());
    }
    public int hashCode() {
        return Objects.hash(field1.toLowerCase(), field2.toLowerCase());
    }
}

class Bad3 {
    String field1;
    String field2;

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Bad3 that = (Bad3) o;
        return Objects.equals(field1.toUpperCase(), that.field1) && // bad
                Objects.equals((field2.toLowerCase()), that.field2.toLowerCase());
    }
    public int hashCode() {
        return Objects.hash(field1, field2.toLowerCase());
    }
}

class Good {
    String field1g;
    String field2g;// bad

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Good that = (Good) o;
        return Objects.equals(field1g.toUpperCase(), that.field1g.toUpperCase()) &&
                Objects.equals((field2g.toLowerCase()), that.field2g.toLowerCase());
    }
    public int hashCode() {
        return Objects.hash(field1g.toUpperCase(), field2g.toLowerCase());
    }
}
             ]]></code>
    </test-code>

</test-data>
