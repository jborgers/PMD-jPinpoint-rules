<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: avoid recreating security providers</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import java.security.*;
import javax.crypto.*;
import org.bouncycastle.jce.provider.*;

class Foo {
    public Cipher initBlowfishBad() throws GeneralSecurityException {
        Security.addProvider(new BouncyCastleProvider());  // bad
        // build a Cipher
    }

    public Cipher initBlowfishGood() throws GeneralSecurityException {
        Provider bouncyCastleProvider = Security.getProvider(BouncyCastleProvider.PROVIDER_NAME);
        if (bouncyCastleProvider == null) {
            bouncyCastleProvider = new BouncyCastleProvider();
            Security.addProvider(bouncyCastleProvider);
        }
        // build a Cipher
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: false positives in AvoidRecreatingSecurityProviders #287</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>32</expected-linenumbers>
        <code><![CDATA[
import java.security.Provider;
import org.bouncycastle.jce.provider.*;

@Service
public class SomeService {

    private Verifier verifier;

    @PostConstruct
    void createVerifier() {
        verifier = new VerifierBuilder()
            .setProvider(new BouncyCastleProvider()) // false positive, in @PostConstruct method, executed only once
            .build(getCertificate().getPublicKey());
    }
}

class OurApplication {
    public static void main(String[] args) {
        Security.insertProviderAt(new OurProvider(), 1);
        Security.addProvider(new BouncyCastleProvider()); // false positive, in static main method, executed only once
        SpringApplication.run(OurApplication.class, args);
    }
}

class OurWorkerApplication implements CommandLineRunner {
    public static void main(String... args) {
        execute(args);
    }

    public static ConfigurableApplicationContext execute(String... args) {
        Security.insertProviderAt(new OurProvider(), 1);
        Security.addProvider(new BouncyCastleProvider()); // bad, 'execute' can be called multiple times
        return SpringApplication.run(OurWorkerApplication.class, args);
    }
}
     ]]></code>
    </test-code>
</test-data>
