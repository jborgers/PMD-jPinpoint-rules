<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: AvoidReStreamingEnumValues bad</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>15, 18</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.stream.*;
// BAD
public enum BadFruit {
    APPLE("apple"),
    ORANGE("orange"),
    BANANA("banana"),
    KIWI("kiwi");

    private final String name;

    BadFruit(String name) { this.name = name; }
    @Override public String toString() { return name; }
    public static Optional<BadFruit> fromString(String name) {
        return Stream.of(values()).filter(v -> v.toString().equals(name)).findAny(); // bad: iterates for every call, O(n) access time
    }
    public static Optional<BadFruit> fromName(String name) {
        return Arrays.stream(BadFruit.values()).filter(f -> f.toString().equals(name)).findFirst(); // bad: iterates for every call, O(n) access time
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description>no violation: AvoidReStreamingEnumValues good</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toMap;
// GOOD
enum Fruit {
    APPLE("apple"),
    ORANGE("orange"),
    BANANA("banana"),
    KIWI("kiwi");

    private static final Map<String, Fruit> nameToValue =
            Stream.of(values()).collect(toMap(Object::toString, v -> v));
    private final String name;

    Fruit(String name) { this.name = name; }
    @Override public String toString() { return name; }
    public static Optional<Fruit> fromString(String name) {
        return Optional.ofNullable(nameToValue.get(name)); // good, get from Map, O(1) access time
    }
}
     ]]></code>
    </test-code>
</test-data>
