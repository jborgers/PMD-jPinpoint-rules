<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>Avoid thread unsafe usage of jaxb - no violation for non-jaxb Validator - #169</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
    import org.springframework.validation.Validator;
    class Validation {
        Validator validator; // fine, self defined Validator from same package
    }
        ]]></code>
    </test-code>

    <test-code>
        <description>Avoid thread unsafe usage of jaxb</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>14,15,16,17</expected-linenumbers>
        <code><![CDATA[
import javax.validation.ConstraintViolation;
import javax.validation.executable.ExecutableValidator;
import javax.validation.metadata.BeanDescriptor;
import javax.xml.bind.*;
import java.io.File;
import java.util.Set;

import org.springframework.validation.Validator;

public class AvoidThreadUnsafeJaxbUsageTest {

	// these are thread-unsafe objects, do not use in fields,
	// rather recreated every time and referenced from local variables
	private javax.xml.bind.Unmarshaller unmarshaller; // should violate 1
	private Marshaller marshaller; // should violate 2
	private javax.xml.bind.Validator validator; // should violate 3
	private javax.xml.validation.Validator validator2; // should violate 4
	private javax.validation.Validator validator3; // should *not* violate
	private Validator validator4;  // should *not* violate
	private JAXBContext jaxbContext;

	// this one is OK to use
	private EmailValidator eValidator; // OK

	private class EmailValidator {
		javax.validation.Validator validator = new javax.validation.Validator() { // should *not* violate
			public <T> Set<ConstraintViolation<T>> validate(T t, Class<?>... classes) {
				return null;
			}

			public <T> Set<ConstraintViolation<T>> validateProperty(T t, String s, Class<?>... classes) {
				return null;
			}

			public <T> Set<ConstraintViolation<T>> validateValue(Class<T> aClass, String s, Object o, Class<?>... classes) {
				return null;
			}

			public BeanDescriptor getConstraintsForClass(Class<?> aClass) {
				return null;
			}

			public <T> T unwrap(Class<T> aClass) {
				return null;
			}

            @Override
            public ExecutableValidator forExecutables() {
                return null;
            }
        };
	}

	public Thing doSomething(File xml) {
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller(); // good, create one each time
        return (Thing) unmarshaller.unmarshal(xml);
    }

}
     ]]></code>
    </test-code>
</test-data>
