<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid unguarded assignment to non-final fields in shared objects</description>
        <expected-problems>13</expected-problems>
        <expected-linenumbers>56, 88, 97, 140, 143, 165, 220, 243, 299, 300, 346, 356, 414</expected-linenumbers>
        <code><![CDATA[
import com.google.common.annotations.VisibleForTesting;
import lombok.Data;
import lombok.Setter;
import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.NotThreadSafe;
import org.slf4j.Logger;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.annotation.BeforeStep;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.annotation.RequestScope;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.boot.context.properties.ConfigurationProperties;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import javax.ejb.ConcurrencyManagement;
import javax.ejb.ConcurrencyManagementType;
import javax.ejb.Singleton;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.concurrent.atomic.AtomicBoolean;

//import javax.inject.Inject;
import static org.springframework.context.annotation.ScopedProxyMode.INTERFACES;
import static org.springframework.context.annotation.ScopedProxyMode.TARGET_CLASS;
import static org.springframework.web.context.WebApplicationContext.SCOPE_APPLICATION;

public class AvoidUnguardedAssignmentToNonFinalFieldsInSharedObjectsTest {

}

// the same for @Service
@Service
class AService1 {
    //static private Date date0Good = new Date(); // rule not applicable
    //private Date date1Good = new Date();
    //private String string1Good = new String();
    //private final String string3Good = new String();

    @Value("${batchService.http.url}")
    private String url;

    public void setUrlBad(final String url) {
        this.url = url; // bad - unguarded accessor method - 56
    }
}

// the same for @Singleton, yet only in case ConcurrencyManagementType.BEAN
@Singleton
class ASingletonContainer {
    //static private Date date0Good = new Date(); // rule not applicable
    //private Date date1Good = new Date(); // same
    //private String stringGood = new String(); // same
    private final String string3Good = new String(); // same

    private String url; //

    public void setUrlGood(final String url) {
        this.url = url; // good: container manages thread-safety
    }

}

// the same for @Singleton, yet only in case ConcurrencyManagementType.BEAN
@Singleton
@ConcurrencyManagement(value = ConcurrencyManagementType.BEAN)
class ASingletonBean {
    //static private Date date0Good = new Date(); // rule not applicable
    //private Date date1Good = new Date(); // same
    //private String stringGood = new String(); // same
    private final String string3Good = new String(); //

    private String url;

    public void setUrlBad(final String url) {
        this.url = url; // bad - unguarded accessor method - 88
    }
}

@Component
@Scope(value = SCOPE_APPLICATION, proxyMode = TARGET_CLASS)
class AComponent2 {
    private String _url;
    public void setUrlBad(final String url) {
        _url = url; // bad - unguarded accessor method - 97
    }
}

@Component
@Scope(value = "request", proxyMode = INTERFACES)
// Only request is safe
class AComponent3Good {
    private String url;
    public void setUrlGood(final String url) {
        this.url = url; // good - request scope
    }
}

@Component
@Scope("request")
        // Only request is safe
class AComponent4Good {
    private String url;
    public void setUrlGood(final String url) {
        this.url = url; // good - request scope
    }
}

@Component
@RequestScope
// Only request is safe
class AComponent5_Good {
    private String url;
    public void setUrlGood(final String url) {
        this.url = url; // good - request scope
    }
}

@Component
class AnotherComponent {
    private String url;
    private String boringField;
    private volatile String volatileGood;
    private String wiredGood;

    public void setUrlBad(String url) {
        String urlx = url;
        boringField = url; // bad - unguarded accessor method - 140
        urlx += "x";
        //url += "/"; // TODO
        this.url = url; // bad - unguarded accessor method - 143
        // TODO check below for field hiding (bad practice)
        //String boringField = "foo";
        //boringField = "bar";
    }

    public void setVolatileGood(String vol) {
        volatileGood = vol;
    }

    @Autowired
    public void setAutowiredGood(String wire) {
        wiredGood = wire;
    }
}

@Component
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = INTERFACES)
// sessions need to be thread safe, too; they are shared among threads
class ASessionScopedComponent {
    private String _url;
    public void setUrlBad(final String url) {
        _url = url; // bad - unguarded accessor method - 165
    }
}

@Component
@Scope(value = "prototype", proxyMode = INTERFACES)
// prototypes are recreated every time and instance fields are therefore safe, they are not shared
class AComponent5 {
    private String url;
    public void setUrlGood(final String url) {
        this.url = url; // good: prototype scope
    }
}

@Component
@Scope(value = ConfigurableBeanFactory.SCOPE_REQUEST)
        // prototypes are recreated every time and instance fields are therefore safe, they are not shared
class AComponent6 {
    private String url;
    public void setUrlGood(final String url) {
        this.url = url; // good - prototype scope
    }
}

// the same for @Singleton, yet only in case ConcurrencyManagementType.BEAN
@Singleton
@ConcurrencyManagement(value = ConcurrencyManagementType.BEAN)
class ASyncedSingletonConcurrencyBean {
    private final Object LOCK = new Object();
    @GuardedBy("LOCK")
    private String string1Good = new String(); // good - guarded
    @GuardedBy("LOCK")
    private final List list1Good = new ArrayList(); // good - guarded
    @GuardedBy("LOCK")
    private Map<String, String> map1Good = new HashMap<>(); // good - guarded
    @Autowired
    private String url;

    public void setString1Good(String string1) {
        synchronized(LOCK) { // Findbugs should be able to check
            this.string1Good = string1;
        }
    }

    public void setString1Good2(String string1) {
        this.string1Good = string1;
    }

    @VisibleForTesting
    void setUrlForTestingOnlyGood(String urlForTestingOnly) {
        this.url = urlForTestingOnly;
    }

    @VisibleForTesting
    public void setUrlForTestingOnlyBad(String urlForTestingOnly) {
        this.url = urlForTestingOnly; // bad - 220
    }
}

@Component
class AComponentMaoValidation {
    // private String string1Bad = new String(); // bad: non-final, unguarded; not this rule
    private final String string3Good = new String(); // good: final, immutable
    private RestTemplate restTemplateGood; // good, autowired setter

    @Autowired
    public void setRestTemplate(@Qualifier("workLongRestTemplate") final RestTemplate restTemplate) {
        this.restTemplateGood = restTemplate;
    }

    private RestTemplate restTemplateBad;

    @Autowired
    public void setRestTemplateBad(@Qualifier("workLongRestTemplate") final RestTemplate restTemplate) {
        this.restTemplateBad = restTemplate;
    }

    public void doRestTemplateBad() {
        restTemplateBad = null; // bad - because also assigned outside autowired setter - 243
    }

    @Data
    private static class InnerDataGood { // static, so not accessible from outer instance, so Good
        private Long Id;
    }

    /*@Data
    private class InnerDataBad { // not static, so accessible from outer instance,
        private Long Id; // violation: non-final, unguarded
        private String string1Bad = new String(); // violation: non-final, unguarded
        private final String string3Good = new String(); // Good!: final, immutable
    }*/

    private static final int KILO = 1024;

    @Value("${fileStorageService.http.output.buffer.size}")
    private int outputBufferSizeInBytes;

    private int outputBufferSizeGood;

    @PostConstruct
    public void afterPropertiesSet() {
        outputBufferSizeGood = outputBufferSizeInBytes * KILO;
    }

    @Value("${rmc.getfiddlesummary.url}")
    private String getFiddleSummaryUrlGood;

    @VisibleForTesting
    void setGetFiddleSummaryUrl(String getFiddleSummaryUrl) {
        this.getFiddleSummaryUrlGood = getFiddleSummaryUrl;
    }

    @PersistenceContext
    private EntityManager entityManagerGood;

    private StepExecution stepExecutionGood;

    @BeforeStep
    public void setStepExecution(final StepExecution stepExecution) {
        this.stepExecutionGood = stepExecution;
    }
}

// the same for @Singleton, yet only in case ConcurrencyManagementType.BEAN
@Singleton
@ConcurrencyManagement(value = ConcurrencyManagementType.BEAN)
class ASingletonConcurrencyBean {
    static private Date date0Bad = new Date();
    private Date date1Bad = new Date();

    private final String string3Good = new String(); // good: final, immutable

    public void setDateBad(Date date) {
        date0Bad = date; // bad: non-final, mutable, unguarded ; static or not doesn't make difference - 299
        date1Bad = date; // bad: non-final, mutable, unguarded - 300
    }
}

// From RO
/*@Singleton
@Startup
@ConcurrencyManagement(value = ConcurrencyManagementType.BEAN)
class BbEventSender {

    @EJB
    private Object bbEventServiceGood;

    @Resource
    private SessionContext sessionContextGood;

    @Inject
    private Object bbEventProducerGood;

    @Inject
    private Logger loggerGood;

    // Boolean to indicate if the scheduled process is currently running.
    private AtomicBoolean processingBbEventViolation = new AtomicBoolean(false); // needs to be final

    private int databaseQueryMaxResultsViolation = 1000; // needs to be final
}*/

@Singleton
//@Startup
@LocalBean
@ConcurrencyManagement(value = ConcurrencyManagementType.BEAN)
class APayRequestOutSender {
    private int databaseQueryMaxResultsGood;
    private int databaseQueryMaxResultsBad;

    @PostConstruct
    private void postConstruct() {
        try {
            databaseQueryMaxResultsGood = Integer.parseInt("1000");
        } catch (NullPointerException | NumberFormatException e) {
            databaseQueryMaxResultsGood = 5000;
        }
    }
    private void setMax() {
        try {
            databaseQueryMaxResultsBad = 5000; // bad - 346
        } catch (RuntimeException e) {}
    }
}

@Service("InitializeRCDCTaskletBad")
abstract class AInitializeTaskletBad implements Tasklet, InitializingBean {
    // Work directory for this instance only.
    protected String workDirectoryBad;
    public void setWorkDirectory(final String workDirectory) {
        this.workDirectoryBad = workDirectory; // bad - 356
    }

}

@Service("InitializeRCDCTaskletGood")
@NotThreadSafe
abstract class AInitializeTaskletGood implements Tasklet, InitializingBean {
    // Work directory for this instance only.
    protected String workDirectoryGood;
    public void setWorkDirectory(final String workDirectory) {
        this.workDirectoryGood = workDirectory;
    }
}

// no violation
@Component
@ConfigurationProperties
class Foo {
    private String field;
    public void setField(String f) {
        field = f;
    }
}

// no violation
@Component
@ConfigurationProperties(prefix="")
class Foo {
    private String field;
    public void setField(String f) {
        field = f;
    }
}

// @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
// @Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES)
// @Scope(value = "globalSession", proxyMode = ScopedProxyMode.INTERFACES)

/*
    String SCOPE_REQUEST = "request";
    String SCOPE_SESSION = "session";
    String SCOPE_GLOBAL_SESSION = "globalSession";
    String SCOPE_APPLICATION = "application";
    String SERVLET_CONTEXT_BEAN_NAME = "servletContext";
    String CONTEXT_PARAMETERS_BEAN_NAME = "contextParameters";
    String CONTEXT_ATTRIBUTES_BEAN_NAME = "contextAttributes";
*/

// inherited field used
@Component
class SubClassBad extends Base {

    SubClassBad() {
        baseField = ""; // good, could be final TODO
    }

    public void setBaseField(final String val) {
        basefield = val; // bad - unguarded accessor method - 414
    }
}

// inherited field used
@Component
class SubClassGood extends Base {
    private final Object LOCK = new Object();
    SubClassGood() {
        baseField = ""; // good, could be final TODO
    }

    public synchronized void setBaseField1(final String val) {
        baseField = val; // assumed good
    }
    public  void setBaseField2(final String val) {
        synchronized(LOCK) {
            baseField = val; // assumed good
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Avoid unguarded assignment to non-final fields in shared objects, inherited used as param in other method</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import org.springframework.stereotype.Component;
@Component
public class Try extends Parent {
    volatile Object field;

    void bad() {
        inherited = new Object(); // bad - 7
    }
    void good(Object objParam, Object inherited) {
        inherited = new Object(); //good, shadowing
        objParam = new Object(); //good
        field = new Object(); //good
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Avoid unguarded assignment to non-final fields in shared objects, local var should be good</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.springframework.stereotype.Service;
@Service(AdviesEnAfsluitkostenFunction.NAME)
public class AdviesEnAfsluitkostenFunction extends AbstractFunction<AdviesEnAfsluitkostenInput, AdviesEnAfsluitkostenResult> {

    public static final String NAME = "adviesEnAfsluitkostenFunction";

    public AdviesEnAfsluitkostenFunction() {
        super();
    }

    private BerekeningBedrag bepaalAfsluitkostenOverlijdensrisicoverzekering(AdviesEnAfsluitkostenInput input,
            Map<String, Map<String, AdviesAfsluitkostenComponent>> adviesEnAfsluitKostenMap,
            List<BerekeningAdviesAfsluitkostenComponent> componenten) {
        BerekeningBedrag afsluitkostenBedr = ZERO;
        if (input.getOverlijdensrisicoverzekeringAant() > 0) {
            AdviesAfsluitkostenComponent adviesAfsluitkostenComponent = adviesEnAfsluitKostenMap.get(AFSLUITKOSTEN_OVERLIJDENSRISICOVERZEKERING).get(STANDAARD);
            componenten.add(getComponent(adviesAfsluitkostenComponent, input.getOverlijdensrisicoverzekeringAant()));
            if (!input.getAfsluitkostenOverlijdensrisicoverzekeringNultariefInd()) {
                BerekeningBedrag opAfslagBedr = valueOf(adviesAfsluitkostenComponent.getOpAfslagBedr());
                afsluitkostenBedr = opAfslagBedr.multiply(input.getOverlijdensrisicoverzekeringAant());
            }
        }
        return afsluitkostenBedr;
    }
}
               ]]></code>
    </test-code>
    <test-code>
            <description>Avoid unguarded assignment to non-final fields in shared objects: @RestController</description>
            <expected-problems>1</expected-problems>
            <expected-linenumbers>7</expected-linenumbers>
            <code><![CDATA[
import org.springframework.web.bind.annotation.RestController;
@RestController
class ARestController1 {
    private String url;

    public void setUrlBad(final String url) {
        this.url = url; // bad
    }
}
               ]]></code>
        </test-code>

    <test-code>
        <description>Avoid unguarded assignment to non-final fields in shared objects: in afterPropertiesSet to be ignored #154</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>8</expected-linenumbers>
        <code><![CDATA[
import org.springframework.stereotype.Component;
@Component
class Foo {
    private Consumer badConsumer;
    private Consumer goodConsumer;

    public void bar() {
       badConsumer = client.buildConsumer(); // bad
    }
    public void afterPropertiesSet() {
       goodConsumer = client.buildConsumer();
    }
}
               ]]></code>
    </test-code>

    <test-code>
        <description>Avoid unguarded assignment to non-final fields in shared objects: @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE) issue #147</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.springframework.context.annotation.Scope;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
@Component
class Foo {
    private String id;
    void build() {
        id = "1"; // good - scope prototype
    }
}
        ]]></code>
    </test-code>
</test-data>
