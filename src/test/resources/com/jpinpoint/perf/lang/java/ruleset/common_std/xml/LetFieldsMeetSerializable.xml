<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violations in LetFieldsMeetSerializable</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>12, 16, 18, 30</expected-linenumbers>
        <code><![CDATA[
import java.lang.*;
import java.util.*;
import java.io.*;
import java.rmi.RemoteException;
import java.time.temporal.ChronoField;

class ShouldMeetSerializable implements Serializable {
    long primMeets;
    String strMeets;
    Exception exMeets;
    Serializable ser;
    Thread t1NotMeets; // bad, Thread is not serializable
    transient Thread t2meets;
    static Thread t3meets;
    List<String> listOfStrings = new ArrayList();
    List<Thread> listOfThreads = new ArrayList(); // bad
    Map<String,String> mapToString = new HashMap();
    Map<String,Thread> mapToThread = new HashMap(); //bad
    Set<ChronoField> CHRONO_SET; // fine, enums are Serializable
}

class NotNeededToMeetSerializable extends Exception {
    Serializable ser;
    Thread t1NotMeets;
    transient Thread t2meets;
}

class ShouldAlsoMeetSerializable extends RemoteException {
    Serializable ser;
    Thread t1NotMeets; // bad
    transient Thread t2meets;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violations in LetFieldsMeetSerializable, for case classes cannot be resolved #214</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.lang.*;
import java.util.*;
import java.io.*;

public class ShouldMeetSerializable implements Serializable {
    String strMeets;
    SerializableOther other;
    SerializableUnresolved unresolvedOther;

    List<SerializableOther> list1;
    List<SerializableUnresolved> list2;
}

class SerializableOther implements Serializable {
    Serializable ser;
    String str;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>Fix Request: LetFieldsMeetSerializable has false positives #231</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>8</expected-linenumbers>
        <code><![CDATA[
import java.lang.*;
import java.util.*;
import java.io.*;
import lombok.*;

class SomeDTO implements Serializable {
    private List<@NonNull Serializable> listGood; // false positive, actually good
    private List<@NonNull Object> listBad; // bad
}
     ]]></code>
    </test-code>

    <test-code>
        <description>Fix Request: LetFieldsMeetSerializable has multiple hits #411</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <code><![CDATA[
import java.lang.*;
import java.util.*;
import java.io.*;

class SomeDTO implements Serializable {
   private MyBank myBank;

    public static class MyBank implements Serializable {
        private MyCode code; // bad <-- two hits on this line, one expected
    }

    private static class MyCode {
        private String code;
    }
}
     ]]></code>
    </test-code>
</test-data>
