<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: forEach in streams</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>15,31</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.stream.IntStream;
import org.slf4j.Logger;
import static java.util.stream.Collectors.toMap;

class AvoidForEachInStreams {

    Logger log;

    List<String> letters = Arrays.asList("a", "b", "c");
    Map<String, Integer> map;
    void forEachInStream() {
        map = new HashMap<>();
        letters.forEach(l -> map.put(l, 0)); // good, not a stream, just internal iterator
        letters.stream().forEach(l -> map.put(l, 0)); // bad, side effect, modifies map
    }
    void forEachInLogging() {
        letters.stream().forEach(Log::info); // good, logging is okay
    }
    void forEachLoop() {
        map = new HashMap<>();
        for (String l : letters) {  // good, meant for modifying state
            map.put(l, 0);
        }
    }
    Map pureFunctional() {
        return letters.stream().collect(toMap(l -> l, v -> 0)); // good, no side effects, no state used nor modified
    }
    void forEachInRange() {
        map = new HashMap<>();
        IntStream.range(0, letters.size()).forEach(i -> map.put(letters.get(i), 0)); // bad, side effect, modifies map
    }
    void loggingForms() { // all good
        letters.stream().forEach(this::log);
        letters.stream().forEach(l -> {
            log.info(l);
        });
        letters.stream().forEach(l -> {
            log(l);
        });
        letters.stream().forEach(Log::info);
    }
    void log(String l) {
        System.out.println(l);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: forEach in streams Issue258</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.*;

class Issue258 {
    Iterable<String> values = new ArrayList<>();
    void bad() {
        values.forEach(Log::debug); // no streaming, good
        values.stream().forEach(Log::debug); // log in stream, good
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>one violation: forEach not in streams Issue407</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>18</expected-linenumbers>
        <code><![CDATA[
import java.util.*;

class Issue407 {
    Iterable<String> values = new ArrayList<>();
    void bad() {
        values.forEach(v -> doStuff(v)); // good
        values.forEach(this::doStuff); // good
    }
    void doStuff(String s) {
    }
}

class VenkatSample2 {
    public static void main(String[] args) {
        List<String> names = List.of("Dory", "Gill", "Bruce", "Nemo", "Darla", "Marlin", "Jacques");
        List<String> inUppercase = new ArrayList<>();

        names.parallelStream().map(String::toUpperCase).forEach(name -> inUppercase.add(name)); // bad

        System.out.println(names.size()); // 7
        System.out.println(inUppercase.size()); // sometimes 6!
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>4 violations: forEach in streams Issue341 Lombok</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>11,17,22,24</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.stream.*;
import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;

@Slf4j
class Issue341 {
    List<String> values = new ArrayList<>();
    Stream<String> valStream = values.stream();
    void bad() {
        values.stream().forEach(v -> { // bad
            doStuff(v);
            this.doStuff(v);
            values.add("bad");
            log.debug(v);
        });
        valStream.forEach(v -> { // bad
            values = null;
            log.debug(v);
        });
        values.stream().forEach(Log::debug); // good
        values.stream().forEach(this::doStuff); // bad
        valStream.forEach(log::debug); // good
        valStream.forEach(this::doStuff); // bad
    }
    void good() {
        values.stream().forEach(v -> {
            log.debug("values: " + v);
            if (!values.isEmpty()) {
                log.info(v);
            }
        });
    }
    void doStuff(String s) {
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>5 violations: forEach in streams Issue341 No-Lombok</description>
        <expected-problems>6</expected-problems>
        <expected-linenumbers>10,14,18,22,23,25</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.stream.*;
import org.slf4j.Logger;

class Issue341NoLombok {
    Logger log;
    List<String> values = new ArrayList<>();
    Stream<String> valStream = values.stream();
    void bad() {
        values.stream().forEach(v -> { // bad
            values = null;
            log.debug(v);
        });
        valStream.forEach(v -> { // bad
            doStuff(v);
            log.debug(v);
        });
        values.stream().forEach(v -> { // bad
            doStuff(v);
            log(v);
        });
        values.stream().forEach(Log::debug); // bad, own Log
        values.stream().forEach(this::doStuff); // bad
        valStream.forEach(log::debug); // good
        valStream.forEach(this::doStuff); // bad
    }
    void good() {
        values.stream().forEach(v -> {
            log.debug(v);
        });
    }
    void doStuff(String s) {
    }
    class Log { // considered not safe, unlikely to be used
        static void debug(String s) {}
    }
    void log(String l) { // considered safe
        System.out.println(l);
    }
}
     ]]></code>
    </test-code>


</test-data>
