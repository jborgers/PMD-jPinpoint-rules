<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>no violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    String field1;
    String field2;

    public String good1() {
        return field1 + " = " + field2;
    }

    public String good2(boolean more) {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1)
                .append(" = ")
                .append(field2);
        if (more) {
            strBui.append("bla");
        }
        return strBui.toString();
    }

    public String good3(boolean more) {
        StringBuilder strBui = new StringBuilder();
        for (int i = 0; i < 3; i++) {
            strBui.append(field1)
                    .append(" = ")
                    .append(field2);
        }
        if (more) {
            strBui.append("bla");
        }
        return strBui.toString();
    }

    public StringBuilder good4() {
        StringBuilder strBui = new StringBuilder();
        return strBui.append(field1)
                .append(" = ")
                .append(field2);

    }

    public String good5() {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1)
                .append(" = ")
                .append(field2);
        buildMore(strBui);
        return strBui.toString();
    }

    private void buildMore(StringBuilder sb) {
    }

}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: unnecessary string builder creation</description>
        <expected-problems>7</expected-problems>
        <expected-linenumbers>6,14,21,27,35,44,52</expected-linenumbers>
        <code><![CDATA[
public class Foo {
    String field1;
    String field2;

    public String bad1() {
        return new StringBuilder()
                .append(field1) // bad 1
                .append(" = ")
                .append(field2)
                .toString();
    }

    public String bad2() {
        String result = new StringBuffer()
                .append(field1)// bad 2
                .toString();
        return result;
    }

    public String bad3() {
        String result = new StringBuilder("field1").append(field2)// bad 3
                .toString();
        return result;
    }

    public String bad4() {
        StringBuilder strBui = new StringBuilder(); // bad 4
        return strBui.append(field1)
                .append(" = ")
                .append(field2)
                .toString();
    }

    public String bad4a() {
        StringBuilder strBui = new StringBuilder(); // bad nr5, missed case found when correcting for #427
        String s = strBui.append(field1)
                .append(" = ")
                .append(field2)
                .toString();
        return s;
    }

    public String bad5() {
        StringBuilder strBui = new StringBuilder(); // bad nr6
        strBui.append(field1)
                .append(" = ")
                .append(field2);
        return strBui.toString();
    }

    public String bad6() {
        StringBuilder strBui = new StringBuilder(); // bad nr7
        strBui.append(field1);
        strBui.append(" = ").append(field2);
        return strBui.toString();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: more than one toString in method (issue #102: fails with error)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <code><![CDATA[
    class Foo {
        public void bar() {
            final String expiry = Long.toString(5);
            final StringBuilder sasToken = new StringBuilder(); // bad
            sasToken.append("a=");
            sasToken.append(expiry);
            sasToken.toString();
        }
    }
        ]]></code>
    </test-code>
    <test-code>
        <description>violation: more than one StringBuilder in method (issue #106: fails with error)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,4</expected-linenumbers>
        <code><![CDATA[
    public class Foo {
        public void bar(Foo bar) {
            StringBuilder one = new StringBuilder(); // bad
            StringBuilder two = new StringBuilder(); // bad

            one.append("one");
            one.append("one-two");
            two.append("two");
            two.append("two-two");

            one.toString();
            two.toString();
        }
    }
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: StringBuilder.append in lambda expression (issue #195)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Issue195 {
 String foo(List<Object> list) {
   StringBuilder stringBuilder = new StringBuilder();
   list.forEach(e -> stringBuilder.append(e).append(" "));
   return stringBuilder.toString();
 }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: false positive for non-append operations (issue #427)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Issue427 {
    String bar() {
        StringBuilder timestampBuilder = new StringBuilder(new SimpleDateFormat(TIME_STAMP_FORMAT).format(new Date()));
        String reversedTimeStamp = timestampBuilder.reverse().append(userId).toString(); // <--- false positive
        return timestampBuilder.append(userId).reverse().toString(); // <--- false positive after fixing the expression partly
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: false positive AvoidUnnecessaryStringBuilderCreation spurious violations #433</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
class Issue433 {
    void bar(String baz) {
        StringBuilder bui = new StringBuilder(); // bad
        bui.append("bla"); // <-- false positive
        bui.append("-blabla"); // <-- false positive
        bui.append(baz); // <-- false positive
        return bui.toString();
    }
}
        ]]></code>
    </test-code>

</test-data>
