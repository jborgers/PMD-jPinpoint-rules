<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>no violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    String field1;
    String field2;

    public String good1() {
        return field1 + " = " + field2;
    }

    public String good2(boolean more) {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1)
                .append(" = ")
                .append(field2);
        if (more) {
            strBui.append("bla");
        }
        return strBui.toString();
    }

    public String good3(boolean more) {
        StringBuilder strBui = new StringBuilder();
        for (int i = 0; i < 3; i++) {
            strBui.append(field1)
                    .append(" = ")
                    .append(field2);
        }
        if (more) {
            strBui.append("bla");
        }
        return strBui.toString();
    }

    public StringBuilder good4() {
        StringBuilder strBui = new StringBuilder();
        return strBui.append(field1)
                .append(" = ")
                .append(field2);

    }

    public String good5() {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1)
                .append(" = ")
                .append(field2);
        buildMore(strBui);
        return strBui.toString();
    }

    private void buildMore(StringBuilder sb) {
    }

}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: unnecessary string builder creation</description>
        <expected-problems>9</expected-problems>
        <expected-linenumbers>6,6,6,14,21,28,36,44,45</expected-linenumbers>
        <code><![CDATA[
public class Foo {
    String field1;
    String field2;

    public String bad1() {
        return new StringBuilder()
                .append(field1) // bad 1
                .append(" = ")
                .append(field2)
                .toString();
    }

    public String bad2() {
        String result = new StringBuffer()
                .append(field1)// bad 2
                .toString();
        return result;
    }

    public String bad3() {
        String result = new StringBuilder("field1").append(field2)// bad 3
                .toString();
        return result;
    }

    public String bad4() {
        StringBuilder strBui = new StringBuilder();
        return strBui.append(field1) // bad 4
                .append(" = ")
                .append(field2)
                .toString();
    }

    public String bad5() {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1) // bad 5
                .append(" = ")
                .append(field2);
        return strBui.toString();
    }

    public String bad6() {
        StringBuilder strBui = new StringBuilder();
        strBui.append(field1); // bad 6
        strBui.append(" = ").append(field2); // bad 7
        return strBui.toString();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: more than one toString in method (issue #102: fails with error)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>5,6</expected-linenumbers>
        <code><![CDATA[
    class Foo {
        public void bar() {
            final String expiry = Long.toString(5);
            final StringBuilder sasToken = new StringBuilder();
            sasToken.append("a="); // bad
            sasToken.append(expiry); // bad
            sasToken.toString();
        }
    }
        ]]></code>
    </test-code>
    <test-code>
        <description>violation: more than one StringBuilder in method (issue #106: fails with error)</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>6,7,8,9</expected-linenumbers>
        <code><![CDATA[
    public class Foo {
        public void bar(Foo bar) {
            StringBuilder one = new StringBuilder();
            StringBuilder two = new StringBuilder();

            one.append("one"); // bad
            one.append("one-two"); // bad
            two.append("two"); // bad
            two.append("two-two"); // bad

            one.toString();
            two.toString();
        }
    }
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: StringBuilder.append in lambda expression (issue #195)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Issue195 {
 String foo(List<Object> list) {
   StringBuilder stringBuilder = new StringBuilder();
   list.forEach(e -> stringBuilder.append(e).append(" "));
   return stringBuilder.toString();
 }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>false positive: StringBuilder is used in while loop (issue #413)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Issue413 {
    String foo(String value, int len) {
        StringBuilder zeroes = new StringBuilder();

        while (zeroes.length() + value.length() < len) {
            zeroes.append('0');
        }

        return zeroes.append(value).toString(); // <-- false positive, zeroes used in while loop
    }
}
        ]]></code>
    </test-code>
</test-data>
