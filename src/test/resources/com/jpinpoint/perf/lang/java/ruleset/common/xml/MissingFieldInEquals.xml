<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>no violation: equals has all fields</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class FieldMissingInEqualsTryout {
    String field1;
    String field2;

    public FieldMissingInEqualsTryout(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        FieldMissingInEqualsTryout that = (FieldMissingInEqualsTryout) o;
        if (field1 != null ? !field1.equals(that.field1) : that.field1 != null) return false;
        return field2 != null ? field2.equals(that.field2) : that.field2 == null;
    }
}

class NoEqTryout {
    String field1;
    String field2;

    public NoEqTryout(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        this.field1 = arg1;
    }
}

class EqTryout2 {
    String field1;
    String field2;

    public EqTryout2(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        EqTryout2 that = (EqTryout2) o;
        return Objects.equals(field1, that.field1) &&
                Objects.equals(field2, that.field2);
    }
    public int hashCode() {
        return Objects.hash(field1, field2);
    }
}
class EqTryoutNested {
    String field1;
    String field2;

    public EqTryoutNested(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    public class Nested {
        String field3;
        Nested(String arg3) {
            field3 = arg3;
        }
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Nested that = (Nested) o;
            return Objects.equals(field3, that.field3);
        }
    }
}

class EqTryoutOtherEquals {
    String field1o;
    String field2o;

    public EqTryout2(String arg2) {
        field2o = arg2;
    }
    public void setField1(String arg1) {
        field1o = arg1;
    }
    public boolean equals() {
        field1o = "";
        return false;
    }
}

class EqTryoutUnsupported {
    String field1;
    String field2;

    public EqTryout2(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    @SuppressFBWarnings("EQ_UNUSUAL")
    public final boolean equals(Object other) {
       throw new UnsupportedOperationException("equals not designed.");
    }
    public final int hashCode() {
       throw new UnsupportedOperationException("hashCode not designed.");
    }
}

class EqTryoutThisThat {
    final String name1;
    final String name2;

    public EqTryoutThisThat(String n1, String n2) {
        name1 = n1;
        this.name2 = n2;
    }
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EqTryoutThisThat that = (EqTryoutThisThat) o;
        return this.name1.equals(that.name1) && name2.equals(that.name2);
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: field2 missing in equals</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
class EqTryoutBad1 {
    String field1;
    String field2; // bad, missing in equals

    public EqTryoutBad1(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        EqTryoutBad1 that = (EqTryoutBad1) o;
        return Objects.equals(field1, that.field1);
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: field2 missing in equals</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
class EqTryoutBad2 {
    String field1;
    String field2; // bad, missing in equals

    public EqTryoutBad2(String arg1) {
        field1 = arg1;
    }
    public void setField2(String arg2) {
        field2 = arg2;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        EqTryoutBad2 that = (EqTryoutBad2) o;
        return Objects.equals(field1, that.field1);
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: field0 missing in equals</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>2</expected-linenumbers>
        <code><![CDATA[
class EqHashTryoutBad3 {
    String field0;// bad, missing in equals
    String field1;
    String field2;
    String field3;
    String field4;
    String field5;
    String field6;

    public EqHashTryoutBad3(String arg2) {
        this.field2 = arg2;
        field3 = field2 + "-complex-assignment-likely-dependent";
        field4 = new String("another");
        field5 = OtherClass.operation();
        field6 = OtherClass.field;
    }
    public void setField1(String arg0, String arg1) {
        field0 = arg0;
        this.field1 = arg1;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        EqHashTryoutBad3 that = (EqHashTryoutBad3) o;
        return Objects.equals(field1, that.field1)&&
                Objects.equals(this.field2, that.field2);
    }
}
    ]]></code>
    </test-code>

    <test-code>
        <description>violation: field4 missing in equals of Nested</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>14</expected-linenumbers>
        <code><![CDATA[
public class EqTryoutNested {
    String field1;
    String field2;

    public EqTryoutNested(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }

    public class Nested {
        String field3;
        String field4; // bad, missing in equals
        Nested(String arg1) {
            field3 = arg1;
        }
        public void setField1(String arg1) {
            field4 = arg1;
        }
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Nested that = (Nested) o;
            return Objects.equals(field3, that.field3);
        }
    }
}
    ]]></code>
    </test-code>

    <test-code>
        <description>no violation: false positive fixed with #74</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class ErrorInfo {

    private final ErrorCode errorCode;

    public ErrorInfo(final String errorCode) {
        this.errorCode = ErrorCode.valueOf(errorCode);
    }
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorInfo errorInfo = (ErrorInfo) o;
        return errorCode == errorInfo.errorCode;
    }
    static class Inner {
        String str;
        void set(String s) {
            str = s;
        }
    }
}
    ]]></code>
    </test-code>

    <test-code>
        <description>violation: missing fields equals of inner classes</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>3, 20, 36</expected-linenumbers>
        <code><![CDATA[
public class Klass {
    String field1;
    String field2; //bad

    public Klass(String arg2) {
        field2 = arg2;
    }
    public void setField1(String arg1) {
        field1 = arg1;
    }
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Klass that = (Klass) o;
        return Objects.equals(field1, that.field1); // field2 missing
    }

    private static class InnerKlass {
        String innerField1;
        String innerField2; //bad

        InnerKlass(String arg2) {
            innerField2 = arg2;
        }
         void setField1(String arg1) {
            innerField1 = arg1;
        }
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            InnerKlass that = (InnerKlass) o;
            return Objects.equals(innerField1, that.innerField1); // field2 missing
        }

        private static class InnerInnerKlass {
           String innerInnerField1; //bad
           String innerInnerField2;

         void setField1(String arg1) {
            innerInnerField1 = arg1;
        }
         void setField2(String arg1) {
            innerInnerField2 = arg1;
        }
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
                InnerInnerKlass that = (InnerInnerKlass) o;
                return Objects.equals(innerInnerField2, that.innerInnerField2);
            }
        }
    }
}
    ]]></code>
    </test-code>


</test-data>
