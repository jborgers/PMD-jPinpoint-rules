<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid Future Get Without Timeout</description>
        <expected-problems>6</expected-problems>
        <expected-linenumbers>14,15,16,17,18,19</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.concurrent.*;

public class AvoidFutureGetWithoutTimeoutTest {
    private static Future<List<T>> futureField1 = null;
    private static Future<List<T>> futureField2 = null;
    private static final long timeout = 10;

    public static void bad(CompletableFuture<List> complFutureParam1, CompletableFuture<List> complFutureParam2, List col,
                               CompletionService<List> complService) throws Exception {
            Future<List> futureLocal1 = complService.take();
		    Future<List> futureLocal2 = complService.take();
            RunnableFuture<List> runFutLocal = new FutureTask<List>(()-> Collections.emptyList());
            col.addAll(complFutureParam2.get()); // bad
            col.addAll(futureLocal1.get()); // bad
		    col.addAll(futureLocal2.get()); // bad;
            col.addAll(runFutLocal.get()); // bad
            col.addAll(futureField1.get()); // bad
            col.addAll(futureField2.get()); // bad
    }

    public static void good(CompletableFuture<List> complFutureParam1, CompletableFuture<List> complFutureParam2, List col,
                               CompletionService<List> complService) throws Exception {
            Future<List> futureLocal1 = complService.take();
		    Future<List> futureLocal2 = complService.take();
            RunnableFuture<List> runFutLocal = new FutureTask<List>(()-> Collections.emptyList());
            col.addAll(complFutureParam1.get(10, TimeUnit.SECONDS)); // good
            col.addAll(futureLocal1.get(timeout, TimeUnit.SECONDS)); // good
            col.addAll(runFutLocal.get(timeout, TimeUnit.SECONDS)); // good
            col.addAll(futureField1.get(timeout, TimeUnit.SECONDS)); // good
            col.addAll(futureField2.get(timeout, TimeUnit.SECONDS)); // good
    }
}
     ]]></code>
    </test-code>
</test-data>
