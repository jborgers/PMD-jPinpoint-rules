<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid CompletionService Take</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>21, 38, 39</expected-linenumbers>
        <code><![CDATA[
import java.util.*;
import java.util.concurrent.*;

public class AvoidCompletionServiceTakeTest<T> {

    private CompletionService<List<T>> complServField = null;

    /**
     * This method is used to wrap the reply of each thread into one as response
     * content.
     *
     * @param responseCollector
     *            the response content collector
     * @param listOfFutures
     *            list of all thread's Future returns
     */
    public static <T> void collectAllCollectionReplyFromThreads(CompletableFuture<List<T>> complFuture, List<T> responseCollector,
                                                                List<Future<List<T>>> listOfFutures, CompletionService<List<T>> completionService) {
        for (int index = 0; index < listOfFutures.size(); index++) {
            try {
                Future<List<T>> futureLocal = completionService.take();  // bad
                RunnableFuture<List<T>> runFutLocal = new FutureTask<>(() -> Collections.emptyList());
                responseCollector.addAll(runFutLocal.get(3, TimeUnit.SECONDS)); // good
                Future test = take(); // good, other take() method
            } catch (InterruptedException | ExecutionException e) {
                //LOGGER.error("Error in Thread : {}", e);
            } catch (TimeoutException e) {
                e.printStackTrace();
            }
        }
    }

    public void collectAllCollectionReplyFromThreads(List<T> responseCollector,
                                                         List<Future<List<T>>> listOfFutures) {
        ExecutorCompletionService complSrv = null;
        for (int index = 0; index < listOfFutures.size(); index++) {
            try {
                Future<List<T>> future = complServField.take(); // bad
                Future<T> take = complSrv.take(); //bad
                responseCollector.addAll(future.get());
            } catch (InterruptedException | ExecutionException e) {
                //LOGGER.error("Error in Thread : {}", e);
            }
        }
    }

    public Future<T> take() { return null; }
}
     ]]></code>
    </test-code>
</test-data>
