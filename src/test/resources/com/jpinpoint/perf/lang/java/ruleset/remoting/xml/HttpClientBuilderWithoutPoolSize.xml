<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: returning HttpClient without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,4</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
class Bad {
    public HttpClient bad(Object conMgr) {
        return HttpClientBuilder.create() // bad, missing setMaxConnPerRoute and setMaxConnTotal
                .setConnectionManager(conMgr)
                .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: returning HttpClient with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
class Good {
    public HttpClient good(Object conMgr) {
        return HttpClientBuilder.create()
                .setMaxConnPerRoute(MAX_CONNECTIONS_PER_ROUTE)
                .setMaxConnTotal(MAX_CONNECTIONS_TOTAL)
                .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClient local built without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,4</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
class Bad {
    public HttpClient bad(Object conMgr) {
        HttpClient client = HttpClientBuilder.create() // bad
                .setConnectionManager(conMgr)
                .build(); // bad
        return client;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClient local built with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
class Bad {
    public HttpClient good(Object conMgr) {
        HttpClient client = HttpClientBuilder.create()
                .setConnectionManager(conMgr)
                .setMaxConnPerRoute(MAX_CONNECTIONS_PER_ROUTE)
                .setMaxConnTotal(MAX_CONNECTIONS_TOTAL)
                .build();
        return client;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClients.custom local built without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>5,5</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
class Bad {
    public CloseableHttpClient bad(Object conMgr) {
        HttpClientBuilder httpClientBuilder = HttpClients.custom() // bad
                .setConnectionManager(null)
                .setRetryHandler(null);
        return httpClientBuilder.build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClients.custom local built with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
class Good {
    public CloseableHttpClient good(Object conMgr) {
        HttpClientBuilder httpClientBuilder = HttpClients.custom() // bad
                .setConnectionManager(null)
                .setRetryHandler(null)
                .setMaxConnPerRoute(MAX_CONNECTIONS_PER_ROUTE)
                .setMaxConnTotal(MAX_CONNECTIONS_TOTAL);
        return httpClientBuilder.build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClients.custom local built via param without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,4</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClients;
class Bad {
    public CloseableHttpClient bad(Object conMgr) {
    HttpClientBuilder httpClientBuilder = HttpClients.custom(); //bad
    return httpClientBuilder.build();
    }
 }
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClients.custom local built via param with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClients;
class Bad {
    public CloseableHttpClient bad(Object conMgr) {
    HttpClientBuilder httpClientBuilder = HttpClients.custom(); //bad
    httpClientBuilder.setMaxConnPerRoute(10);
    httpClientBuilder.setMaxConnTotal(10);
    return httpClientBuilder.build();
    }
 }
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClients of other type</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import nl.mypackage.HttpClients;
class Good {
    public CloseableHttpClient good(Object conMgr) {
        HttpClientBuilder httpClientBuilder = HttpClients.custom();
        return httpClientBuilder.build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder formal param, built without pool sizes set</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
class Bad {
    private HttpAsyncClientBuilder bad(final HttpAsyncClientBuilder clientBuilder) {
        clientBuilder
            .setDefaultCredentialsProvider(CREDENTIALS)
            .setMaxConnTotal(MAX_CONNECTIONS_TOTAL);
        return clientBuilder;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpAsyncClientBuilder formal param, built with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
class Good {
    private HttpAsyncClientBuilder good(final HttpAsyncClientBuilder clientBuilder) {
        clientBuilder
            .setDefaultCredentialsProvider(CREDENTIALS)
            .setMaxConnPerRoute(MAX_CONNECTIONS_PER_ROUTE)
            .setMaxConnTotal(MAX_CONNECTIONS_TOTAL);
        return clientBuilder;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder formal param, and return created built without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,3</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
class Bad {
    private HttpAsyncClientBuilder bad(final HttpAsyncClientBuilder clientBuilder) { // bad
        return HttpAsyncClientBuilder.create() //bad
            .setDefaultCredentialsProvider(CREDENTIALS);
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: PoolingHttpClientConnectionManager created without pool sizes set</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,4</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
class Bad {
    private PoolingHttpClientConnectionManager bad() { // bad
        return new PoolingHttpClientConnectionManager();
    }
}
   ]]></code>
    </test-code>

    <test-code>
        <description>no violation: PoolingHttpClientConnectionManager with pool sizes set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
class Good {
    private PoolingHttpClientConnectionManager good() {
        final PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        cm.setMaxTotal(maxConnections);
        cm.setDefaultMaxPerRoute(maxConnections);
        return cm;
    }
}
   ]]></code>
    </test-code>

</test-data>
