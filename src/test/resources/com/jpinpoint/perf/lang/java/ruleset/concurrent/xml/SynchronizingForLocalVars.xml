<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>SynchronizingForLocalVars</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>10, 22</expected-linenumbers>
        <code><![CDATA[
import org.slf4j.MDC;
import java.util.HashMap;
import java.util.Map;
public class Foo {
    private Map<String, String> mapField;

    protected Map<String, String> bad() {
      Map<String, String> addHeaders = MDC.getCopyOfContextMap();

      synchronized(this) { // bad - 10
          if (addHeaders == null) {
              addHeaders = new HashMap<>();
          }
      }
      return addHeaders;
    }

    protected Map<String, String> bad2(Map mapParam) {
      Map<String, String> addHeaders = MDC.getCopyOfContextMap();
      Map<String, String> map2 = new HashMap<>();
      Map<String, String> map3 = new HashMap<>();
      synchronized (mapField) { // bad - 22
          if (addHeaders == null) {
              addHeaders = new HashMap<>();
          }
          //mapField = addHeaders;
          map2.put("key", "value");
          map3.put("key", map2);
      }
      return addHeaders;
    }

   protected Map<String, String> good() {
      Map<String, String> addHeaders = MDC.getCopyOfContextMap();

      synchronized (this) {
          if (mapField == null) {
              mapField = new HashMap<>();
              addHeaders = new HashMap<>();
          }
      }
      return addHeaders;
    }

   protected Map<String, String> goodWithThis() {
      Map<String, String> addHeaders = MDC.getCopyOfContextMap();

      synchronized (this) {
          if (this.mapField == null) {
              this.mapField = new HashMap<>();
              addHeaders = new HashMap<>();
          }
      }
      return addHeaders;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>SynchronizingForLocalVars false positive #204</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import lombok.AllArgsConstructor;
import lombok.Data;
@Data
@AllArgsConstructor
public class Information {
    private int delay;
    private final Object delayLock = new Object();

    public void setDelay(int delay) {
        synchronized (delayLock) {
            this.delay = delay;
        }
    }
    public int getDelay() {
        synchronized(delayLock) { // false positive
            return this.delay;
        }
    }
}

class Information2 {
    private int delay;
    private final Object delayLock = new Object();

    public void setDelay(int d) {
        synchronized (delayLock) {
            delay = d;
        }
    }
    public int getDelay() {
        synchronized(delayLock) { // false positive
            return delay;
        }
    }
}
     ]]></code>
    </test-code>
</test-data>
