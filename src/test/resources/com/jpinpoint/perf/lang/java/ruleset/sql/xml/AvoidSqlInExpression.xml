<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: Avoid sql in expressions</description>
        <expected-problems>9</expected-problems>
        <expected-linenumbers>7,32,35,44,68,70,72,74,100</expected-linenumbers>
        <code><![CDATA[
import javax.persistence.*;
import java.util.Arrays;
import java.util.List;

public class Foo {
    private void updateSampleStatusViolateO(List<Long> txnKeys) {
        Expression exp = CompositeLogicalExpression.compose(InExpression.in("oKey", txnKeys)); //violation
    }
}

class Expression {
}

class InExpression extends Expression {
    public static Expression in(String id, List<Long> keys){
        return null;
    }
}

class CompositeLogicalExpression extends Expression {
    public static Expression compose(Expression exp) {
        return null;
    }
}

@Entity
@Table(name = "B_EVENT_SOURCE")
@NamedQueries({
        @NamedQuery(
                name = "BEventSource.deleteViolation",
                query = "DELETE BEventSource " +
                        "WHERE id IN (:idsOfEventsSent)"), // violation
        @NamedQuery(
                name = "AuthorisationHistoryDoodleGroup.getAuthIdsViolation",
                query = "SELECT ah FROM AuthorisationHistoryDoodleGroup ah WHERE ah.doodleGroupId IN :doodleGroupIds "), //violation
        @NamedQuery(
                name = "DoodleDeskDinner.findCountDoodleTypeExecutingForRequestorAndGivenDateOk",
                query = "SELECT pcp.doodleOriginator.doodleType, COUNT(pcp) FROM DoodleDeskDinner pcp"
                + " WHERE pcp.doodleOriginator.id IN (SELECT po.id FROM DoodleOriginator po WHERE po.processingDate = :date AND po.currentStatus.status = STANDING AND po.doodleGroupIn.doodleRequestIn.requestor.requestorName= :requestorName) "
                + " GROUP BY pcp.doodleOriginator.doodleType"), // subselect in IN clause: OK
        @NamedQuery(
                name = "DoodleDeskDinner.findCountViolation",
                query = "SELECT pcp.doodleOriginator.doodleType, COUNT(pcp) FROM DoodleDeskDinner pcp"
                + " WHERE pcp.doodleOriginator.id IN ( SELECT po.id FROM DoodleOriginator po WHERE ah.doodleGroupId IN :doodleGroupIds"), // violation, subselect in IN clause with problematic inner IN
        @NamedQuery(
                name = "DoodleDeskDinner.findCount2OK",
                query = "SELECT pcp.doodleOriginator.doodleType, COUNT(pcp) FROM DoodleDeskDinner pcp"
                + " WHERE pcp.doodleOriginator.id IN ( SELECT po.id FROM DoodleOriginator po WHERE po.processingDate = :date AND po.currentStatus.status = STANDING AND po.doodleGroupIn.doodleRequestIn.requestor.requestorName= :requestorName) "
                + " GROUP BY pcp.doodleOriginator.doodleType"), // subselect in IN clause: OK
})


class PolicyEggStatementRepository {
    public List<Object> retrieveOk() {
        EntityManager entityManager = null;
        String sqlOk = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + "AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN :statusCds"; // OK because a limited set, list of 2 elements

        Query query = entityManager.createQuery(sqlOk);
        query.setParameter("procesStatus", "AFHANDELEN");
        query.setParameter("statusCds", Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_INTERPOLIS"));

        return query.getResultList();
    }
    public List<Object> retrieveViolation(List statuses) {
        EntityManager entityManager = null;
        String sqlViolation1 = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + "AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN :statusCds"; // Violation because unknown number of elements
        String sqlViolation2 = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + " AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN (:statusCds)"; // Violation because unknown number of elements
        String sqlViolation3 = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + " AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN ( :statusCds )"; // Violation because unknown number of elements
        String sqlViolation4 = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + " AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN(:statusCds)"; // Violation because unknown number of elements

        Query query = entityManager.createQuery(sqlViolation1);
        query.setParameter("procesStatus", "JUSTDOIT");
        query.setParameter("statusCds", statuses);

        return query.getResultList();
    }
    public List retrieveActievePolicyEggStatementenForStatusCeilingReceiptsstuffOk() {
        String sql = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + "AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN :statusCds";
        EntityManager entityManager = null;
        List list = Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_4");
        Query query = entityManager.createQuery(sql);
        query.setParameter("procesStatus", "DOIT");
        query.setParameter("statusCds", Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_TABLE"));

        return query.getResultList();
    }

}

@Entity
@Table(name = "OP_BASED")
@NamedQueries({
        @NamedQuery(name = "BEventSource.deleteViolation", query =
                "DELETE BEventSource WHERE id IN(:idsOfEventsSent)"), // violation
})
class BasedOnOFinding{
}
     ]]></code>
    </test-code>
    <test-code>
        <description>no violation: Avoid sql in expressions</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import javax.persistence.*;
import java.util.Arrays;
import java.util.List;

public class Foo {
}

class Expression {
}

class InExpression extends Expression {
    public static Expression in(String id, List<Long> keys){
        return null;
    }
}

class CompositeLogicalExpression extends Expression {
    public static Expression compose(Expression exp) {
        return null;
    }
}

@Entity
@Table(name = "B_EVENT_SOURCE")
@NamedQueries({
        @NamedQuery(
                name = "DoodleDeskDinner.findCountDoodleTypeExecutingForRequestorAndGivenDateOk",
                query = "SELECT pcp.doodleOriginator.doodleType, COUNT(pcp) FROM DoodleDeskDinner pcp"
                + " WHERE pcp.doodleOriginator.id IN (SELECT po.id FROM DoodleOriginator po WHERE po.processingDate = :date AND po.currentStatus.status = STANDING AND po.doodleGroupIn.doodleRequestIn.requestor.requestorName= :requestorName) "
                + " GROUP BY pcp.doodleOriginator.doodleType"), // subselect in IN clause: OK
        @NamedQuery(
                name = "DoodleDeskDinner.findCount2OK",
                query = "SELECT pcp.doodleOriginator.doodleType, COUNT(pcp) FROM DoodleDeskDinner pcp"
                + " WHERE pcp.doodleOriginator.id IN ( SELECT po.id FROM DoodleOriginator po WHERE po.processingDate = :date AND po.currentStatus.status = STANDING AND po.doodleGroupIn.doodleRequestIn.requestor.requestorName= :requestorName) "
                + " GROUP BY pcp.doodleOriginator.doodleType"), // subselect in IN clause: OK
})

class PolicyEggStatementRepository {
    public List<Object> retrieveOk() {
        EntityManager entityManager = null;
        String sqlOk = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + "AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN :statusCds"; // OK because a limited set, list of 2 elements

        Query query = entityManager.createQuery(sqlOk);
        query.setParameter("procesStatus", "AFHANDELEN");
        query.setParameter("statusCds", Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_INTERPOLIS"));

        return query.getResultList();
    }
    public List<Object> retrieveViolation(List statuses) {
        EntityManager entityManager = null;
        String sql = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id";
        return query.getResultList();
    }
    public List retrieveActievePolicyEggStatementenForStatusCeilingReceiptsstuffOk() {
        String sql = "select h from CeilingProces a, PolicyEggStatement h where a.eggstatementId = h.id AND a.processtatusCd = :procesStatus "
                + "AND a.ceilingReceiptsstuff.receiptsstuffStatusCd IN :statusCds";
        EntityManager entityManager = null;
        List list = Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_4");
        Query query = entityManager.createQuery(sql);
        query.setParameter("procesStatus", "DOIT");
        query.setParameter("statusCds", Arrays.asList("CEILING_IN_BEHANDELING", "ERROR_TABLE"));

        return query.getResultList();
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description>violation: Avoid sql in expressions with Criteria API</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>5, 8, 11, 18</expected-linenumbers>
        <code><![CDATA[
import javax.persistence.criteria.*;
public class Tryout {
    private void bad1(Root<Object> root, List<Long> ids) {
        List<Predicate> predicateList = new ArrayList<Predicate>();
        predicateList.add(root.<Information>get("current").<Long>get("id").in(ids)); // bad
    }
    private void bad2(Root<Customer> cust, List<Long> ids) {
        Predicate p = cust.<Customer>get("current").<Long>get("id").in(ids); // bad
    }
    private void bad3(CriteriaBuilder builder, Root<Book> book, List<String> titles) {
        In<String> inClause = builder.in(book.get("title")); // bad
        for (String title : titles) {
            inClause.value(title);
        }
        criteriaQuery.select(book).where(inClause);
    }
    private void bad4(CriteriaQuery cq, Root<Book> book, List<String> titles) {
        cq.select(book).where(book.get("title").in(titles)); // bad
    }
    private void good(CriteriaBuilder builder, CriteriaQuery cq, Root<Customer> cust, Subquery<PostalCode> subquery) {
        cq.select(cust).where(builder.in(cust.get("postalCode")).value(subquery));
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: Avoid sql in expressions with multiple params, no processing error, issue #302</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
import javax.persistence.TypedQuery;

public class PmdProcessingError {
    void example() {
        String number = "", kinds = "";
        String queryStr = "SELECT M FROM MessageEntity m WHERE m.kind IN :kinds"; // bad
        final TypedQuery<Object> query = null;
        query.setParameter("num", number);
        query.setParameter("kinds", kinds);
    }
}
     ]]></code>
    </test-code>

</test-data>
