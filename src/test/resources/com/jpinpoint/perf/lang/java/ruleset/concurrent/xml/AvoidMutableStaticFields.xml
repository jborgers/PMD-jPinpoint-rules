<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid mutable static fields</description>
        <expected-problems>23</expected-problems>
        <expected-linenumbers>14,15,16,19,20,22,26,27,30,31,43,53,61,62,63,64,80,82,84,86,93,94,99</expected-linenumbers>
        <code><![CDATA[
import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.NotThreadSafe;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.*;

import static org.springframework.context.annotation.ScopedProxyMode.INTERFACES;

@NotThreadSafe
public class AvoidMutableStaticFieldsTest {
    private static final String stringOk1 = "Ok";
    private static String stringViolate1; // bad - line 14
    static String stringViolate2; //bad
    public static Object objViolate3; //bad
    @GuardedBy("lock")
    public static Object objGuardedOk;
    private static final Date dateViolate4 = new Date(); // Date is known mutable type // bad - line 19
    private static Map mapViolate5; // bad
    private static final Map mapOk = Collections.emptyMap();
    private static final Map mapViolate6 = new HashMap(); // HashMap is known mutable type // bad
    @GuardedBy("lock")
    private static final Date dateOk = new Date(); // Date is known mutable type, needs guarding
    private static final File[] NO_FILES_OK = {};
    private static final File[] FILES_Violate7 = {new File("/tmp/a")}; // bad - line 26
    private static final String[] strArrayViolate8 = new String[2]; // array is mutable, elements can be replaced // bad
    private static final Object[] objArrayOk = new Object[0]; // 0 elements to replace
    private static volatile String stringVolatileOk1; // volatile helps for the reference
    private static volatile Map mapViolate9 = new HashMap(); // HashMap is known mutable type, volatile only helps for the reference // bad
    private static final String[] QUALIFIERS_Violate = {"alpha", "beta", "milestone"}; // bad
    private static final List QUALIFIERS_Ok = Collections.unmodifiableList(Arrays.asList("alpha", "beta", "milestone"));
    // In Java 9 we can do: List.of("alpha", "beta", "milestone"); // Immutable, Nice!

    public static void main(String[] args) {
        System.out.println("" + QUALIFIERS_Violate + QUALIFIERS_Ok);
    }
}
    @Component
    @Scope(value = "request", proxyMode = INTERFACES)
            // Only request is safe
class Component3Ok2 {
    static private Date date0Violate = new Date(); // static is shared among all prototype instances // bad - line 43
    private Date date1Ok = new Date(); //
    private String string1Ok = new String(); //
    private final String string3Ok = new String(); // OK!: final, immutable
}

@Component
@Scope(value = "prototype", proxyMode = INTERFACES)
        // prototypes are recreated every time and instance fields are therefore safe, they are not shared
class Component5_2 {
    static private Date date0Violate = new Date(); // static is shared among all prototype instances // bad - line 53
    private Date date1Ok = new Date(); //
    private String string1Ok = new String(); //
    private final String string3Ok = new String(); //
}

class NoFilesNoArrays_2 {
    private static final File[] NO_FILES_OK = {};
    private static final File[] FILES_Violate = {new File("/tmp/a")}; // bad - line 61
    private static final File file_violate = new File("dummy"); // bad
    private static final String[] names_violate = {"aap", "noot", "mies"}; //bad
    private static final String[] names2_violate = new String[2]; //bad
}

class Formatted {
    private static final String[] names_violate;
    private static final String[] names_ok;
    private static final ThreadLocal<NumberFormat>[] FORMATTERS;
    private static final String[] nonEmptyViolate;
    private static final String[] emptyOk;
    private static final Map mapOk;
    private static final Map mapViolate;
    @GuardedBy("lock")
    private static final Map mapOkGuarded;
    private static final ConcurrentMap mapSafe;

    static {
        names_violate = new String[]{"aap", "noot", stringViolate1}; // bad - line 80
        names_ok = new String[]{};
        FORMATTERS = new ThreadLocal[NUMBER_OF_FORMATTERS]; // bad
        emptyOk = new String[0];
        nonEmptyViolate = new String[5]; // bad
        mapOk = Collections.emptyMap();
        mapViolate = new HashMap(); // HashMap is known mutable type // bad
        mapOkGuarded = new HashMap();
        mapSafe = new ConcurrentHashMap();
    }
}

class StaticListsAndMore {
    private static final List<String> names1 = Arrays.asList("a", "b"); // bad - line 93
    private static final List<String> names2 = Arrays.asList(new String[]{"a", "b"}); // bad

    private static final List<String> immutableNames = Collections.unmodifiableList(Arrays.asList("a", "b"));

    private static final Map mapUnmodifiable = Collections.unmodifiableMap(new HashMap()); // good
    private static final Set set = new HashSet(); // bad
}
        ]]></code>
    </test-code>

    <test-code>
        <description>violation: HashMap static field in enum</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
    enum Bad {
        VAL1;
        static final Map<String, Bad> STRING_TO_ENUM = new HashMap<>(); // bad
    }
    enum Good {
        VAL1;
        static final Map<String, Good> STRING_TO_ENUM; // good
        static {
            Map<String, Good> map = new HashMap<>();
            STRING_TO_ENUM = Collections.unmodifiableMap(map);
        }
    }
    ]]></code>
    </test-code>

    <test-code>
        <description>Avoid mutable static EnumMap fields</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>8,9</expected-linenumbers>
        <code><![CDATA[
import java.util.*;

public final class BadWithEnum {
    private static final EnumMap<SomeType, String> map1;
    private static final Map<SomeType, String> map2;

    static {
        map1 = new EnumMap<>(SomeType.class); // bad
        map2 = new EnumMap<>(SomeType.class); // bad
    }
}
    ]]></code>
    </test-code>
</test-data>
