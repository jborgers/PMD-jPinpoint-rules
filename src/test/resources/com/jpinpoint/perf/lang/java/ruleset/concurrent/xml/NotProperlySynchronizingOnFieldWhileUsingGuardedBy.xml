<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy good</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
   import net.jcip.annotations.GuardedBy;
   public class Good1 {
        @GuardedBy("LOCK")
        private String txt;
        private final Object LOCK = new Object();

        public String getText() {
            synchronized(LOCK) {
                return txt; // good
            }
        }
        public String setText(String t) {
            synchronized(LOCK) {
                txt = t; // good
            }
        }
    }

   public class Good2 {
        @GuardedBy("this")
        private String txt;
        private final Object LOCK = new Object();
        private final Object WRONG_LOCK = new Object();

        public String getText() {
            synchronized(this) {
                return txt; // good
            }
        }
        public synchronized String setText(String t) {
                txt = t; // good
        }
    }

   public class Good3 {
        @GuardedBy("this")
        private String txt;
        @GuardedBy("LOCK")
        private String txt2;
        private final Object LOCK = new Object();
        private final Object WRONG_LOCK = new Object();

        public String getText() {
            synchronized(this) {
                return txt; // good
            }
        }
        public  String setText2(String t) {
            synchronized(LOCK) {
                txt2 = t; // good
            }
        }
    }

   public class Good4 {
        @GuardedBy("LOCK1")
        private String txt1;
        @GuardedBy("LOCK2")
        private String txt2;
        private final Object LOCK1 = new Object();
        private final Object LOCK2 = new Object();

        public String getText1() {
            synchronized(LOCK1) {
                return txt1; // good
            }
        }
        public  String setText2(String t) {
            synchronized(LOCK2) {
                txt2 = t; // good
            }
        }
    }

    ]]></code>
    </test-code>

    <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy, not properly synchronized</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7, 10</expected-linenumbers>
        <code><![CDATA[
    import net.jcip.annotations.GuardedBy;
    public class Bad1 {
        @GuardedBy("LOCK")
        private String txt1;
        private final Object LOCK = new Object();
        public String getText() {
                return txt1; // bad
        }
        public synchronized String setText(String t) {
                txt1 = t; // bad
        }
    }
]]></code>
    </test-code>

   <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy, synchronized with not the GuardedBy LOCK</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>10, 15</expected-linenumbers>
        <code><![CDATA[
    import javax.annotation.concurrent.GuardedBy;
    public class Bad2 {
        @GuardedBy("LOCK")
        private String txt2;
        private final Object LOCK = new Object();
        private final Object WRONG_LOCK = new Object();

        public String getText() {
            synchronized(WRONG_LOCK) {
                return txt2; // bad
            }
        }
        public String setText(String t) {
            synchronized(this) {
                txt2 = t; // bad
            }
        }
    }
    ]]></code>
   </test-code>

   <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy, LOCK not a field</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>9, 15</expected-linenumbers>
        <code><![CDATA[
   import com.google.errorprone.annotations.concurrent.GuardedBy;
   public class Bad3 {
        @GuardedBy("LOCK")
        private String txt3;

        public String getText() {
            final Object LOCK = new Object();
            synchronized(LOCK) {
                return txt3; // bad
            }
        }
        public String setText(String t) {
            final Object LOCK = new Object();
            synchronized(LOCK) {
                txt3 = t; // bad
            }
        }
    }
    ]]></code>
   </test-code>

   <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy, synchronized wrongly</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>9, 14</expected-linenumbers>
        <code><![CDATA[
   import net.jcip.annotations.GuardedBy;
   public class Bad4 {
        @GuardedBy("LOCK")
        private String txt4;
        private final Object LOCK = new Object();

        public String getText() {
            synchronized(txt4) {
                return txt4; // bad
            }
        }
        public String setText(String t) {
            synchronized("LOCK") {
                txt4 = t; // bad
            }
        }
    }
    ]]></code>
   </test-code>

   <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy hard to cover in pmd6</description>
        <expected-problems>2</expected-problems>
       <expected-linenumbers>30, 35</expected-linenumbers>
        <code><![CDATA[
    import net.jcip.annotations.GuardedBy;
    public class HardToViolate1 {
        @GuardedBy("LOCK1")
        private String txt1;
        @GuardedBy("LOCK2")
        private String txt2;
        private final Object LOCK1 = new Object();
        private final Object LOCK2 = new Object();

        public String getText1() {
            synchronized(LOCK2) {
                return txt1; // not really good
            }
        }
        public  String setText2(String t) {
            synchronized(LOCK2) {
                txt2 = t; // not really good
            }
        }
    }

    public class HardToViolate2 {
        @GuardedBy("WRONG_LOCK")
        private String txt;
        private final Object LOCK = new Object();
        private final Object WRONG_LOCK = new Object();

        public String getText() {
            synchronized(LOCK) {
                return txt; // bad
            }
        }
        public String setText(String t) {
            synchronized(LOCK) {
                txt = t; // bad
            }
        }
    }    ]]></code>
   </test-code>

    <test-code>
        <description>NotProperlySynchronizingOnFieldWhileUsingGuardedBy Issue #442, another rule catches this case
            (NotProperlySynchronizingOnThisWhileUsingGuardedBy)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Issue442 {
        @GuardedBy("this")
        private String txt;

        public String getText() {
            return txt; // <-- false positive
        }

        public void setText(String t) {
            txt = t; //  <-- false positive
        }
}
        ]]></code>
    </test-code>

</test-data>
