<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>no violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import com.google.common.collect.*;
import java.util.*;
class Good {
    List mutatedList = new ArrayList();
    final List unmodList1;
    List unmodList2;
    List modList1;
    List immList = ImmutableList.of("tic", "tac");
    List emptyListField = Collections.EMPTY_LIST;
    List emptyListMethod = Collections.emptyList();

    Good(List in1, List in2) {
        unmodList1 = List.of("1");
        unmodList2 = Collections.unmodifiableList(new ArrayList<String>());
        modList1 = new ArrayList(in1);
    }

    void mutate(String elem) {
        mutatedList.add(elem);
        this.modList1.add("one");
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: mutable List used while not mutated</description>
        <expected-problems>5</expected-problems>
        <expected-linenumbers>4,5,6,7,8</expected-linenumbers>
        <code><![CDATA[
import com.google.common.collect.*;
import java.util.*;
public class Bad {
    private static final List mutableList0; // bad
    private static final List mutableList1 = new ArrayList<String>(); // bad
    List mutableList2; // bad
    List mutableList3; // bad
    List modList2 = Collections.unmodifiableList(new ArrayList<String>()); //bad
    static {
        mutableList0 = new ArrayList();
        mutableList1.add("1");
    }
    Bad(List in1, List in2) {
        mutableList2 = in1;
        mutableList3 = new ArrayList(in2);
        modList2 = new ArrayList();
        modList2.add("one");
    }
    void mutate(String elem) {
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: mutable List used as @OneToMany mutated/managed by JPA, issue #129</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.*;
import javax.persistence.*;
import nl.company.ItemDto;
import org.springframework.lang.NonNull;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@NoArgsConstructor
@Entity(name = "ITEM")
public class Item {
    @OrderColumn(name = "SEQ_NR")
    @JoinColumn(name = "ITEM_ID")
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)
    private final List<ItemProperties> properties = new ArrayList<>();   // good

    public Item(@NonNull ItemDto item) {
        proofItem.getProperties().stream()
            .map(ItemProperties::new)
            .forEach(properties::add);
    }
}
     ]]></code>
    </test-code>
</test-data>
