<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid Executor Invoke Without Timeout</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>5, 15</expected-linenumbers>
        <code><![CDATA[
import java.util.concurrent.*;

class Foo {
    private List<Future<ServiceResult>> executeTasksBad(Collection<Callable<ServiceResult>> tasks, ExecutorService executor) throws Exception {
        return executor.invokeAll(tasks); // bad, no timeout
    }
    private List<Future<ServiceResult>> executeTasksGood(Collection<Callable<ServiceResult>> tasks, ExecutorService executor) throws Exception {
        return executor.invokeAll(tasks, OUR_TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS); // good
    }
}

class Issue320 {
    private Object bad(ExecutorService forkJoinPool) {
        Object result = forkJoinPool.invokeAll(
                        on.stream().map(value -> apply(toDo, value)).toList() // bad, timeout missing
                ).stream()
                .map(ParallelizationUtils::getListItem)
                .toList();
        return result;
    }

    private Object good(ExecutorService forkJoinPool) {
        Object result = forkJoinPool.invokeAll(
                        on.stream().map(value -> apply(toDo, value)).toList(), 300000, TimeUnit.SECONDS
                ).stream()
                .map(ParallelizationUtils::getListItem)
                .toList();
        return result;
    }
}
]]></code>
    </test-code>
</test-data>
