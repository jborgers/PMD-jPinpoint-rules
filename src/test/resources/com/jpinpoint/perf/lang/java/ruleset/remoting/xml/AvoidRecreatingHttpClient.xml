<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>HttpClient not recreated</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.springframework.context.annotation.Configuration;

class FooGood {
    Closeable createGood(Object req) {
        HttpClient httpClient = HttpClientBuilder.create().setMaxConnPerRoute(10).build(); // good
        return httpClient;
    }

    void connectGood(Closeable httpClient, Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        ResponseEntity<Object> response = remoteCall(httpClient, requestEntity);
        return response;
    }

    private ResponseEntity<Object> remoteCall(Closeable client, HttpEntity<Object> reqEntity) {
    }
}

@Configuration
class FooNotBad {
    void connectBad(Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        ResponseEntity<Object> responseEntity = null;
        HttpClient httpClient = HttpClientBuilder.create().setMaxConnPerRoute(10).build(); // not bad, config
        return remoteCall(httpClient, requestEntity);
    }
}

]]></code>
    </test-code>

    <test-code>
        <description>HttpClient recreated</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>12,30,38</expected-linenumbers>
        <code><![CDATA[
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.apache.http.impl.client.HttpClients;

class FooBad {
    void connectBad(Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        ResponseEntity<Object> responseEntity = null;
        HttpClient httpClient = HttpClientBuilder.create().setMaxConnPerRoute(10).build(); // bad
        return remoteCall(httpClient, requestEntity);
    }

    Closeable createGood(Object req) {
        HttpClient httpClient = HttpClientBuilder.create().setMaxConnPerRoute(10).build(); // good
        return httpClient;
    }

    void connectGood(Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        ResponseEntity<Object> responseEntity = null;
    }

    void connectBad2(Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        ResponseEntity<Object> responseEntity = null;

        HttpClientBuilder httpClientBuilder = HttpClients.custom() // bad
                .setMaxConnTotal(10).build();
        ResponseEntity<Object> response = remoteCall(httpClient, requestEntity);
        return response;
    }

    ResponseEntity<Object> connectBad3(Object req) {
        HttpEntity<Object> requestEntity = new HttpEntity<>(req);
        CloseableHttpAsyncClient httpClient = HttpAsyncClientBuilder.create() // bad
            .setMaxConnTotal(10)
            .build();
        return remoteCall(httpClient, requestEntity);
    }

    private ResponseEntity<Object> remoteCall(Closeable client, HttpEntity<Object> reqEntity) {
    }
}

]]></code>
    </test-code>
</test-data>