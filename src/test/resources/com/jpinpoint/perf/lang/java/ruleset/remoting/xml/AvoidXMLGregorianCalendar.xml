<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid XMLGregorianCalendar</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>7,8,11</expected-linenumbers>
        <code><![CDATA[
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

public class AvoidXMLGregorianCalendar {

	private XMLGregorianCalendar sprinkleDatum; // bad
	protected XMLGregorianCalendar sparkleDatum; // bad

	public XMLGregorianCalendar getSparkleDatum2() { // abundant
		XMLGregorianCalendar cal = sprinkleDatum;  // bad
		try {
			cal = DatatypeFactory.newInstance().newXMLGregorianCalendar();
		} catch (DatatypeConfigurationException e) {
			// huh?
			assert false;
		}
		return cal;
	}
}
      ]]></code>
    </test-code>

    <test-code>
        <description>Avoid XMLGregorianCalendar, avoid double hits</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <code><![CDATA[
import javax.xml.datatype.XMLGregorianCalendar;

public class AvoidXMLGregorianCalendarDoubleHits {

    protected XMLGregorianCalendar startDate; // bad

    public XMLGregorianCalendar getStartDate() { // abundant
        return startDate;
    }

    public void setStartDate(XMLGregorianCalendar value) { // abundant
        this.startDate = value;
    }
}
      ]]></code>
    </test-code>

    <test-code>
        <description>Avoid XMLGregorianCalendar in gson</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import javax.xml.datatype.XMLGregorianCalendar;
import my.app.XMLGregorianCalendarTypeAdapter;

public class AvoidXMLGregorianCalendarGson {

    private Gson gson = new GsonBuilder()
        .registerTypeHierarchyAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarTypeAdapter()) // bad
        .build();
}
      ]]></code>
    </test-code>

    <test-code>
        <description>Avoid XMLGregorianCalendar in gson</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import javax.xml.datatype.XMLGregorianCalendar;
import my.app.XMLGregorianCalendarTypeAdapter;

public class AvoidXMLGregorianCalendarGson {

    private Gson gson = new GsonBuilder()
        .registerTypeHierarchyAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarTypeAdapter()) // bad
        .build();

}
      ]]></code>
    </test-code>

    <test-code>
        <description>Avoid XMLGregorianCalendar in class definitions</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>13,13</expected-linenumbers>
        <code><![CDATA[
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.lang.reflect.Type;

public class XMLGregorianCalendarTypeAdapter implements JsonSerializer<XMLGregorianCalendar>, JsonDeserializer<XMLGregorianCalendar> { // bad 2x
    @Override
    public XMLGregorianCalendar deserialize(  // abundant
            JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)
            throws JsonParseException {
        try {
            return DatatypeFactory.newInstance().newXMLGregorianCalendar(jsonElement.getAsString());
        } catch (Exception e) {
            throw new JsonParseException(e);
        }
    }

    @Override
    public JsonElement serialize(XMLGregorianCalendar xmlGregorianCalendar, Type type, JsonSerializationContext jsonSerializationContext) { // abundant
        return new JsonPrimitive(xmlGregorianCalendar.toString());
    }
}
      ]]></code>
    </test-code>

    <test-code>
        <description>Avoid XMLGregorianCalendar in non abundant situations</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>5,9</expected-linenumbers>
        <code><![CDATA[
import javax.xml.datatype.XMLGregorianCalendar;
import my.app.Remote;

public class XMLGregorianCalendarInUse {
    public XMLGregorianCalendar produceDate() { // bad - not mentioned in field or class definition
        return Remote.createDate();
    }

    public void showDate(XMLGregorianCalendar value) { // bad - not mentioned in field or class definition
        Remote.showDate(value);
    }
}
      ]]></code>
    </test-code>

</test-data>
