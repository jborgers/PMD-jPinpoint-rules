<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid recompilation of xpath expressions</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>21</expected-linenumbers>
        <code><![CDATA[
import org.apache.xpath.XPathAPI;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import javax.xml.parsers.*;
import javax.xml.transform.TransformerException;
import javax.xml.xpath.*;
import java.io.IOException;

public class XPathUsageTest {

	public static void main(String[] args) throws ParserConfigurationException,
			SAXException, IOException, XPathExpressionException {

		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		domFactory.setNamespaceAware(true); // never forget this!
		DocumentBuilder builder = domFactory.newDocumentBuilder();
		Document doc = builder.parse("books.xml");

		XPathFactory factory = XPathFactory.newInstance();
		XPath xpath = factory.newXPath();
		XPathExpression expr = xpath.compile("//book[author='Isaac Asimov']/title/text()"); // bad

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodes = (NodeList) result;
		for (int i = 0; i < nodes.getLength(); i++) {
			System.out.println(nodes.item(i).getNodeValue());
		}
	}

	public String getAction() {
		try {
			Node doc = null;
			return XPathAPI.eval(doc, "/Envelope/Header/Action").toString();
		} catch (TransformerException e) {
			//logger.debug("", e);
			return null;
		}
	}
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Avoid recompiling xpath expression, other compile</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class GoodHere {
    void otherCompile() {
        MyCompiler.compile("stuff");
    }
}

class MyCompiler {
    static void compile(String s) {
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>one violation: Avoid recompiling xpath expression, bad and good example compile</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>8</expected-linenumbers>
        <code><![CDATA[
import org.w3c.dom.*;
import javax.xml.xpath.*;
import javax.xml.namespace.QName;
    class Bad {
        public static NodeList bad(Document doc) {
            XPathFactory factory = XPathFactory.newInstance();
            XPath xpath = factory.newXPath();
            XPathExpression expr = xpath.compile("//book[author='Isaac Asimov']/title/text()"); //bad
            return expr.evaluate(doc, XPathConstants.NODESET);
        }
    }
    class Good {
        private static final ThreadLocal<XPathFactory> tlFac = ThreadLocal.withInitial(XPathFactory::newInstance);
        private static final ThreadLocal<XPathExpression> tlExpr;
        static {
            XPath xpath = tlFac.get().newXPath();
            XPathExpression expr = xpath.compile("//book[author='Isaac Asimov']/title/text()");
            tlExpr = ThreadLocal.withInitial(expr); // good
        }
        public static NodeList good(Document doc) {
            return tlExpr.get().evaluate(doc, XPathConstants.NODESET);
        }
    }
    ]]></code>
    </test-code>

    <test-code>
        <description>violation: Avoid recompiling xpath expression, evaluate on XPath with implicit compile</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>10</expected-linenumbers>
        <code><![CDATA[
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import javax.xml.xpath.*;
import javax.xml.namespace.QName;

    class Bad2 {
        public static NodeList bad2(Document doc) throws XPathExpressionException {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String xPathQuery = "//book[author='Isaac Asimov']/title/text()";
            return (NodeList) xpath.evaluate(xPathQuery, doc, XPathConstants.NODESET); // bad
        }
    }
    ]]></code>
    </test-code>

</test-data>
