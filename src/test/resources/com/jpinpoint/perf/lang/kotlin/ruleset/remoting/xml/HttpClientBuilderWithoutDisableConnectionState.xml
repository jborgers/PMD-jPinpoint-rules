<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>violation: returning HttpClient built without disableConnectionState</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
class Bad {
    fun bad(conMgr: Any?): HttpClient {
        return HttpClientBuilder.create() // bad, missing disableConnectionState
            .setConnectionManager(conMgr)
            .build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: returning HttpClient built with disableConnectionState</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Good {
    fun good(conMgr: Any?): HttpClient {
        return HttpClientBuilder.create()
            .setConnectionManager(conMgr)
            .disableConnectionState()
            .build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClient local built without disableConnectionState</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
internal class Bad {
    fun bad(conMgr: Any?): HttpClient {
        return HttpClientBuilder.create() // bad
            .setConnectionManager(conMgr)
            .build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClient local built with disableConnectionState</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
internal class Bad {
    fun good(conMgr: Any?): HttpClient {
        return HttpClientBuilder.create()
            .setConnectionManager(conMgr)
            .disableConnectionState()
            .build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClients.custom local built without disableConnectionState</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <code><![CDATA[
internal class Bad {
    fun bad(conMgr: Any?): CloseableHttpClient {
        val httpClientBuilder = HttpClients.custom() // bad
            .setConnectionManager(null)
            .setRetryHandler(null)
        return httpClientBuilder.build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpClients.custom local built with disableConnectionState</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
internal class Good {
    fun good(conMgr: Any?): CloseableHttpClient {
        val httpClientBuilder = HttpClients.custom() // good
            .disableConnectionState()
            .setConnectionManager(null)
            .setRetryHandler(null)
        return httpClientBuilder.build()
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder formal param, built without disableConnectionState</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>2</expected-linenumbers>
        <code><![CDATA[
internal class Bad {
    private fun bad(clientBuilder: HttpAsyncClientBuilder): HttpAsyncClientBuilder {
        clientBuilder
            .setDefaultCredentialsProvider(CREDENTIALS)
        return clientBuilder
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: HttpAsyncClientBuilder formal param, built with disableConnectionState</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
internal class Good {
    private fun good(clientBuilder: HttpAsyncClientBuilder): HttpAsyncClientBuilder {
        clientBuilder
            .setDefaultCredentialsProvider(CREDENTIALS)
            .disableConnectionState()
        return clientBuilder
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder formal param, and return created built without disableConnectionState</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>2,3</expected-linenumbers>
        <code><![CDATA[
internal class Bad {
    private fun bad(clientBuilder: HttpAsyncClientBuilder): HttpAsyncClientBuilder { // bad
        return HttpAsyncClientBuilder.create() //bad
            .setDefaultCredentialsProvider(CREDENTIALS)
    }
}
     ]]></code>
    </test-code>

</test-data>
