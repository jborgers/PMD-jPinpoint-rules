<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>no violation: use of Apache HttpClient with all timeouts set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.client.CloseableHttpClient;

class Good {
    public CloseableHttpClient good() {
        RequestConfig requestConfig = RequestConfig.custom()
            .setConnectionRequestTimeout(350)
            .setConnectTimeout(250)
            .setSocketTimeout(4000)
            .build(); // good, all timeouts set

        return HttpClientBuilder.create()
            .setDefaultRequestConfig(requestConfig) // good, all timeouts set, if missing > default timeouts?
            .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: use of Apache HttpClient RequestConfig, not all timeouts set</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.client.CloseableHttpClient;

class Bad {
    public CloseableHttpClient bad() {
        RequestConfig requestConfig = RequestConfig.custom()
            .setSocketTimeout(4000)
            .build(); // bad, not all timeouts set

        return HttpClientBuilder.create()
            .setDefaultRequestConfig(requestConfig) // good, all timeouts set, if missing > default timeouts?
            .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: no setDefaultRequestConfig called to set explicit timeouts</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.client.CloseableHttpClient;

class Bad {
    public CloseableHttpClient bad() {
        return HttpClientBuilder.create() // bad
            .setConnectionTimeToLive(180, TimeUnit.SECONDS)
            .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClientBuilder param no setDefaultRequestConfig called with explicit timeouts</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.CloseableHttpClient;

class Bad {
    public CloseableHttpClient bad(HttpClientBuilder builder) { // bad
        return builder
            .setConnectionTimeToLive(180, TimeUnit.SECONDS)
            .build();
    };
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder no setDefaultRequestConfig called with explicit timeouts</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;

class Bad {
    public CloseableHttpAsyncClient bad() {
        return HttpAsyncClientBuilder.create() // bad
            .disableAuthCaching()
            .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpClients.custom and no setDefaultRequestConfig called with explicit timeouts</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;

class Bad {
    public CloseableHttpClient bad() {
        return HttpClients.custom() // bad
            .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Spring HttpComponentsClientHttpRequestFactory and all timeouts set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.client.HttpClient;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;

class Good {
    public HttpClient good() {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory(); // good
        factory.setConnectTimeout(250);
        factory.setConnectionRequestTimeout(350);
        factory.setReadTimeout(4000);
        return factory.getHttpClient();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: Spring HttpComponentsClientHttpRequestFactory and not all timeouts set</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.client.HttpClient;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;

class Bad {
    public HttpClient bad() {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory(); // bad
        factory.setReadTimeout(4000);
        return factory.getHttpClient();
    }
 }
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Spring HttpComponentsClientHttpRequestFactory and explicit HttpClient with probably all timeouts set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.client.HttpClient;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;

class Good {
    public HttpComponentsClientHttpRequestFactory good1(HttpClient client) {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory(client); // good
        return factory;
    }

    public HttpComponentsClientHttpRequestFactory good2(HttpClient client) {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory();
            factory.setHttpClient(client); // good
        return factory;
    }

    public HttpComponentsClientHttpRequestFactory good3() {

        RequestConfig requestConfig = RequestConfig.custom()
            .setConnectionRequestTimeout(350)
            .setConnectTimeout(250)
            .setSocketTimeout(4000)
            .build(); // good, all timeouts set

        HttpClient client = HttpClientBuilder.create()
            .setDefaultRequestConfig(requestConfig) // good, all timeouts set, if missing > default timeouts?
            .build();

        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory();
            factory.setHttpClient(client); // good

        return factory;
    }

    public HttpComponentsClientHttpRequestFactory good4(HttpClient client) {

        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory();
            factory.setHttpClient(client); // good

        return factory;
    }
 }
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: Spring HttpComponentsClientHttpRequestFactory and explicit HttpClient and explicit timeouts, but not all three timeouts set</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>7,13,30</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.client.HttpClient;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;

class Bad {
    public HttpClient bad1(HttpClient client) {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory(client); // bad
        factory.setReadTimeout(4000);
        return factory.getHttpClient();
    }
    public HttpClient bad2(HttpClient client) {
        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory(); // bad
        factory.setHttpClient(client);
        factory.setReadTimeout(4000);
        return factory.getHttpClient();
    }
    public HttpComponentsClientHttpRequestFactory bad3() {

        RequestConfig requestConfig = RequestConfig.custom()
            .setConnectionRequestTimeout(350)
            .setConnectTimeout(250)
            .build(); // bad, socketTimeout is missing

        HttpClient client = HttpClientBuilder.create()
            .setDefaultRequestConfig(requestConfig)
            .build();

        HttpComponentsClientHttpRequestFactory factory =
            new HttpComponentsClientHttpRequestFactory();
            factory.setHttpClient(client); // bad, see missing timeout above

        return factory;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: Spring HttpComponentsClientHttpRequestFactory param and explicit timeouts, but not all three timeouts set</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.client.HttpClient;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;

class Bad {
    public HttpClient bad(HttpComponentsClientHttpRequestFactory factory) { // bad
        factory.setReadTimeout(4000);
        return factory.getHttpClient();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Spring HttpComponentsClientHttpRequestFactory param and explicit timeouts and all three timeouts set</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
class Good {
    public HttpClient good(HttpComponentsClientHttpRequestFactory factory) {
        factory.setReadTimeout(4000); // good
        factory.setConnectionRequestTimeout(350);
        factory.setConnectTimeout(250);
        return factory.getHttpClient();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Spring HttpComponentsClientHttpRequestFactory has ctor arg which is method with return type HttpClient. Issue #160</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.client.config.*;
import org.apache.http.impl.client.*;
import org.springframework.http.client.*;
import org.apache.http.client.*;

class HttpClientGood {
    private ClientHttpRequestFactory getClientHttpRequestFactory() {
        return new HttpComponentsClientHttpRequestFactory(createHttpClient());
    }

    private CloseableHttpClient createHttpClient () {
        RequestConfig requestConfig = RequestConfig.custom()
                .setConnectionRequestTimeout(350)
                .setConnectTimeout(250)
                .setSocketTimeout(4000)
                .build(); // good, all timeouts set

        return HttpClientBuilder.create()
                .setDefaultRequestConfig(requestConfig) // good, all timeouts set, if missing > default timeouts?
                .build();
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>no violation: Spring HttpComponentsClientHttpRequestFactory has ctor arg of HttpClient build from HttpClients. Issue #163</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.http.client.config.*;
import org.apache.http.impl.client.*;
import org.springframework.http.client.*;
import org.apache.http.client.*;

class HttpClientGood2 {
    private HttpComponentsClientHttpRequestFactory getRequestFactory(SSLContext sslContext) {
        RequestConfig requestConfig = RequestConfig.custom()
            .setConnectionRequestTimeout(properties.getConnectionRequestTimeOutInMillis())
            .setConnectTimeout(properties.getConnectTimeOutInMillis())
            .setSocketTimeout(properties.getReadTimeOutInMillis())
            .build();

        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory(
                HttpClients.custom()
                        .setDefaultRequestConfig(requestConfig)
                        .setMaxConnTotal(DEFAULT_MAXIMUM_CONNECTIONS_TOTAL)
                        .setMaxConnPerRoute(DEFAULT_MAXIMUM_CONNECTIONS_PER_ROUTE)
                        .disableConnectionState()
                        .build()
        );

        //clientHttpRequestFactory.setConnectTimeout(properties.getConnectTimeOutInMillis()); // false positives: were needed
        //clientHttpRequestFactory.setConnectionRequestTimeout(properties.getConnectionRequestTimeOutInMillis());
        //clientHttpRequestFactory.setReadTimeout(properties.getReadTimeOutInMillis());

        return clientHttpRequestFactory;
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>violation: HttpAsyncClientBuilder with callbacks not all three timeouts set. Issue #191</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>32</expected-linenumbers>
        <code><![CDATA[
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;

class DataStoreConfigGood {
    private RestClientBuilder getRestClientBuilder() {
        return RestClient.builder(hosts)
                .setHttpClientConfigCallback(this::createHttpClientConfigCallback)
                .setRequestConfigCallback(this::createRequestConfigCallbackGood);
    }
    private HttpAsyncClientBuilder createHttpClientConfigCallback(final HttpAsyncClientBuilder clientBuilder) {
        clientBuilder
                .setMaxConnPerRoute(20)
                .setMaxConnTotal(20);
        return clientBuilder;
    }
    private RequestConfig.Builder createRequestConfigCallbackGood(RequestConfig.Builder builder) {
        return builder
                .setConnectTimeout(200)
                .setConnectionRequestTimeout(200)
                .setSocketTimeout(4000);
    }
}

class DataStoreConfigBad {
    private RestClientBuilder getRestClientBuilder() {
        return RestClient.builder(hosts)
                .setHttpClientConfigCallback(this::createHttpClientConfigCallback)
                .setRequestConfigCallback(this::createRequestConfigCallbackBad);
    }
    private HttpAsyncClientBuilder createHttpClientConfigCallback(final HttpAsyncClientBuilder clientBuilder) { // bad
        clientBuilder
                .setMaxConnPerRoute(20)
                .setMaxConnTotal(20);
        return clientBuilder;
    }
    private RequestConfig.Builder createRequestConfigCallbackBad(RequestConfig.Builder builder) {
        return builder
                .setConnectTimeout(200)
                .setSocketTimeout(4000); // one timeout missing
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>No violation: HttpClient version 5 used, ignored, issue #282</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.apache.hc.client5.http.config.ConnectionConfig;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.BasicHttpClientConnectionManager;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.concurrent.TimeUnit;

class ExampleTimeouts {
    @Bean
    public RestTemplate restTemplate() {
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
        factory.setHttpClient(httpClient());
        // alternative way to set the 3 timeouts:
        factory.setConnectionRequestTimeout(connectTimeoutInMillis); // 1
        factory.setConnectTimeout(connectTimeoutInMillis); // 2
        //factory.setReadTimeout(readTimeoutInMillis);  // 3
        return new RestTemplate(factory);
    }

    private CloseableHttpClient httpClient() {
            RequestConfig requestConfig = RequestConfig.custom()
                    .setConnectionRequestTimeout(connectTimeoutInMillis, TimeUnit.MILLISECONDS) // 1
                    .setResponseTimeout(readTimeoutInMillis, TimeUnit.MILLISECONDS) // 3
                    .build();

            final ConnectionConfig connConfig = ConnectionConfig.custom()
                    .setConnectTimeout(connectTimeoutInMillis, TimeUnit.MILLISECONDS) // 2
                    .setSocketTimeout(readTimeoutInMillis, TimeUnit.MILLISECONDS).build(); // 3

            final PoolingHttpClientConnectionManager connectionManager =
                    new BasicHttpClientConnectionManager(socketFactoryRegistry);
            connectionManager.setConnectionConfig(connConfig);

            return HttpClients.custom()
                    .setDefaultRequestConfig(requestConfig)
                    .setConnectionManager(connectionManager)
                    .disableConnectionState()
                    .build();
    }
}
     ]]></code>
    </test-code>

</test-data>
