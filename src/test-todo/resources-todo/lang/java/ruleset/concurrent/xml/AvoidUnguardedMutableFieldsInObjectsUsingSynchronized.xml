<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>2 unguarded mutable fields in objects using synchronized</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>13,15</expected-linenumbers>
        <code><![CDATA[
package com.jpinpoint.tryout;

import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.ThreadSafe;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

//@NotThreadSafe
public class Bad {
    //@GuardedBy("this")
    private static Map staticMapField = new HashMap();
    //@GuardedBy("LOCK")
    private Date date = new Date();

    public Date getDate() {
        return date;
    }

    public void setDate(Date d) {
        date = d;
    }

    public static synchronized Map getStaticMapField() {
        return staticMapField;
    }

    public static  void setStaticMapField(Map smf) {
        staticMapField = smf;
    }
}
 ]]></code>
    </test-code>
    <test-code>
        <description>violation: 2 assignments to non-final fields in object using synchronized block</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>12,14</expected-linenumbers>
        <code><![CDATA[
package com.jpinpoint.tryout;

import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.ThreadSafe;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class Bad {
    //@GuardedBy("this")
    private static Map staticMapField = new HashMap();
    //@GuardedBy("LOCK")
    private Date date = new Date();

    public Date getDate() {
        return date;
    }

    public void setDate(Date d) {
        synchronized(this) { date = d; }
    }

    public static synchronized Map getStaticMapField() {
        return staticMapField;
    }

    public static  void setStaticMapField(Map smf) {
        staticMapField = smf;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: no synchronized used</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package com.jpinpoint.tryout;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class Good {
    private static Map staticMapField = new HashMap();
    private Date date = new Date();

    public Date getDate() {
        return date;
    }

    public void setDate(Date d) {
        date = d;
    }

    public static  Map getStaticMapField() {
        return staticMapField;
    }

    public static  void setStaticMapField(Map smf) {
        staticMapField = smf;
    }
}

        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: @NotThreadSafe </description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package com.jpinpoint.tryout;

import net.jcip.annotations.NotThreadSafe;
import java.util.Date;

@NotThreadSafe
public class Good {
    private Date date = new Date();
    public synchronized void setDate(Date d) {
        date = d;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>no violation: using @Inject</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package com.jpinpoint.tryout;
import java.util.Date;

public class Good {
    @GuardedBy("this")
    private Date date;
    private Object ref1;
    @Inject
    private Object ref2;

    @Inject
    public void setRef1(Object r) {
        ref1 = r;
    }
    public synchronized void setDate(Date d) {
        date = d;
    }
}
        ]]></code>
    </test-code>


    <test-code>
        <description>no violation: 2 assignments on fields stated to be GuardedBy (which they are not)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package com.jpinpoint.tryout;

import net.jcip.annotations.GuardedBy;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class GoodForThisRule {
    @GuardedBy("this")
    private static Map staticMapField = new HashMap();
    @GuardedBy("LOCK")
    private Date date = new Date();

    public void setDate(Date d) {
        date = d;
    }

    public static synchronized Map getStaticMapField() {
        return staticMapField;
    }

    public static  void setStaticMapField(Map smf) {
        staticMapField = smf;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Avoid unguarded mutable fields in objects using synchronized, fields of known mutable types initialized in constructor</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>4,5, 10,11</expected-linenumbers>
        <code><![CDATA[
    import java.util.*;

class Bad {
    private Map<String, String> map1 = new HashMap<>(); // bad, reference and map is mutable
    private final Map<String, String> map2 = new HashMap<>(); // bad, map is mutable
    private final Map<String, String> map3 = new ConcurrentHashMap<>(); // good, concurrenthashmap is thread-safe
    @GuardedBy("this")
    private Map<String, String> map4 = new HashMap<>(); // good, guarded

    private Map<String, String> mapCtor1; // bad, reference and map is mutable
    private final Map<String, String> mapCtor2; // bad, constructed with known mutable type
    private final Map<String, String> mapCtor3; // good, concurrenthashmap is thread-safe
    @GuardedBy("this")
    private Map<String, String> mapCtor4; // good, guarded

    public Bad() {
        mapCtor1 = new HashMap<>();
        mapCtor2 = new HashMap<>();
        mapCtor3 = new ConcurrentHashMap<>();
        mapCtor4 = new HashMap<>();
    }

    public synchronized void syncedMethod() {
    }
}
        ]]></code>
    </test-code>

</test-data>
