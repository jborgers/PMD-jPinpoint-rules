<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Atributes in session objects take up heap space</description>
        <expected-problems>6</expected-problems>
        <expected-linenumbers>11, 41, 70, 99, 103, 161</expected-linenumbers>
        <code><![CDATA[
import javax.portlet.PortletSession;
import javax.portlet.ResourceRequest;
import javax.servlet.http.HttpSession;
import org.springframework.web.portlet.util.PortletUtils;

public class MinimizeAttributesInSessionTest {
	private PortletSession ps;

	class Bad {
		public void setAttribute(final String name, final Object obj) {
			getPortletSession().setAttribute(name, obj);                 // bad
		}
		public Object getAttribute(final String sessionAttributeName) {
			return getPortletSession().getAttribute(sessionAttributeName);
		}
	        PortletSession getPortletSession() {
		    return ps;
	        }
	}

	class Good {
		public void setAttribute(final String name, final Object obj) {
			getPortletSession().setAttribute(name, obj);
		}
		public Object getAttribute(final String sessionAttributeName) {
			return getPortletSession().getAttribute(sessionAttributeName);
		}
		public void removeAttribute(final String name) {
			getPortletSession().removeAttribute(name);
		}
                PortletSession getPortletSession() {
		    return ps;
	        }
	}

	static class Test2_Flag {
		PortletSession ses;

		public void setAttribute(final String sessionAttributeName,
				final Object object) {
			ses.setAttribute(sessionAttributeName, object);         // bad
		}

		public Object getAttribute(final String sessionAttributeName) {
			return ses.getAttribute(sessionAttributeName);
		}

		public void removeAttribute(final String sessionAttributeName) {
			//ses.removeAttribute(sessionAttributeName);
		}
	}

	static class Test2_Ok {
		PortletSession ses;

		public void setAttribute(final String sessionAttributeName,
				final Object object) {
			ses.setAttribute(sessionAttributeName, object);
		}

		public void removeAttribute(final String sessionAttributeName) {
			ses.removeAttribute(sessionAttributeName);
		}
	}

	 class Test3_Flag {

		public void setAttribute(final String sessionAttributeName,
				final Object object) {
			getPortletSession().setAttribute(sessionAttributeName, object); // bad
		}

		public void removeAttributes(final String... sessionAttributeNames) {
			final PortletSession portletSession = getPortletSession();
			for (final String sessionAttributeName : sessionAttributeNames) {
				//portletSession.removeAttribute(sessionAttributeName);
			}
		}
	}

	 class Test3_Ok {

		public void setAttribute(final String sessionAttributeName,
				final Object object) {
			getPortletSession().setAttribute(sessionAttributeName, object);
		}

		public void removeAttributes(final String... sessionAttributeNames) {
			final PortletSession portletSession = getPortletSession();
			for (final String sessionAttributeName : sessionAttributeNames) {
				portletSession.removeAttribute(sessionAttributeName);
			}
		}
	}

	 class Test4_Flag {

		private void setUploadStatus(final ResourceRequest request) {
			PortletUtils.setSessionAttribute(request, "status", "value"); // bad
		}

		public void removeUploadStatus(final ResourceRequest request) {
			PortletUtils.setSessionAttribute(request, "status", ""); // bad
		}
	}

	static class Test4_Ok {

		private void setUploadStatus(final ResourceRequest request) {
			PortletUtils.setSessionAttribute(request, "status", "value");
		}

		public void removeUploadStatus(final ResourceRequest request) {
			PortletUtils.setSessionAttribute(request, "status", null); // Spring will invoke removeAttribute
		}
	}


    // TODO: case: /*(ActionRequest)*/ request.getPortletSession().setAttribute(SIGN_SPARKLE_SESSION_KEY, signSparkle);

    /**
     * Get the {@link PortletSession} from the current request.
     *
     * @return {@link PortletSession}
     * @see org.springframework.web.portlet.context.PortletApplicationContextUtils
     */
/*	public static PortletSession getPortletSession() {
		final RequestAttributes requestAttr = RequestContextHolder
				.currentRequestAttributes();
		if (!(requestAttr instanceof PortletRequestAttributes)) {
			throw new IllegalStateException(
					"Current request is not a portlet request");
		}
		return ((PortletRequestAttributes) requestAttr).getRequest()
				.getPortletSession();
	}*/

}
 class Test5_Ok {
	public void setAttribute(final String sessionAttributeName,
							 final Object object) {
		getOther().setAttribute(sessionAttributeName, object); // good, no [Http/Portlet]Session]
	}

	public Object getAttribute(final String sessionAttributeName) {
		return getOther().getAttribute(sessionAttributeName);
	}

	Other getOther() {
		return new Other();
	}
}
 class Other {
	void setAttribute(String n, Object o) {}
	Object getAttribute(String n) {}
}

class Bad2 {
	private HttpSession hs;
	public void setAttribute(final String name, final Object obj) {
		hs.setAttribute(name, obj);                 // bad
	}
	public Object getAttribute(final String sessionAttributeName) {
		return hs.getAttribute(sessionAttributeName);
	}
}

class Good2 {
	private HttpSession hs;
	public void setAttribute(final String name, final Object obj) {
		hs.setAttribute(name, obj); // good
	}
	public Object getAttribute(final String sessionAttributeName) {
		return hs.getAttribute(sessionAttributeName);
	}
	public void removeAttribute(final String name) {
		hs.removeAttribute(name);
	}
}
]]></code>
    </test-code>
</test-data>
