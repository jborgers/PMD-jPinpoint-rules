<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Avoid xpath usage</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>18, 31</expected-linenumbers>
        <code><![CDATA[
import org.apache.xpath.XPathAPI;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.xpath.*;
import java.io.IOException;
//import org.apache.commons.jxpath.*;


public class XPathUsageTest {

    private static final Object fact = XPathFactory.newInstance(); // bad
    private static final ThreadLocal<XPath> parser = ThreadLocal.withInitial(() -> XPathFactory.newInstance().newXPath()); // good
    private static final ThreadLocal<XPathFactory> fac = ThreadLocal.withInitial(XPathFactory::newInstance); // good

	public static void main(String[] args) throws ParserConfigurationException,
			SAXException, IOException, XPathExpressionException {

		DocumentBuilderFactory domFactory = DocumentBuilderFactory
				.newInstance();
		domFactory.setNamespaceAware(true); // never forget this!
		DocumentBuilder builder = domFactory.newDocumentBuilder();
		Document doc = builder.parse("books.xml");

		XPathFactory factory = XPathFactory.newInstance(); // bad
		XPath xpath = factory.newXPath();
		XPathExpression expr = xpath
				.compile("//book[author='Isaac Asimov']/title/text()");

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodes = (NodeList) result;
		for (int i = 0; i < nodes.getLength(); i++) {
			System.out.println(nodes.item(i).getNodeValue());
		}
	}

	public String getAction() {
		try {
			Node doc = null;
			return XPathAPI.eval(doc, "/Envelope/Header/Action").toString();
		} catch (TransformerException e) {
			//logger.debug("", e);
			return null;
		}
	}
}
     ]]></code>
    </test-code>
</test-data>
