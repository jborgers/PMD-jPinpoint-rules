<?xml version="1.0" encoding="UTF-8"?>
<test-data
        xmlns="http://pmd.sourceforge.net/rule-tests"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Define concurrency for JavaEE Singleton</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>20, 35</expected-linenumbers>
        <code><![CDATA[
package com.jpinpoint.tryout;
import javax.ejb.*;
public class SingletonTryout {}

@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@Singleton
class SingletonBean1 {
    private String state;

    @Lock(LockType.READ)
    public String getState() {
        return state;
    }

    @Lock(LockType.WRITE)
    public void setState(String newState) {
        state = newState;
    }
}
@Singleton
class SingletonBean2 { // bad - @ConcurrencyManagement missing
    private String state;

    @Lock(LockType.READ)
    public String getState() {
        return state;
    }

    @Lock(LockType.WRITE)
    public void setState(String newState) {
        state = newState;
    }
}
@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@Singleton // bad - @Lock missing on a public method
class SingletonBean3 {
    private String state;

    public String getState() {
        return state;
    }

    @Lock(LockType.WRITE)
    public void setState(String newState) {
        state = newState;
    }
}
@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@Singleton
class SingletonBean4 {
    private String state;

    private String getState() {
        return state;
    }

    @Lock(LockType.WRITE)
    public void setState(String newState) {
        state = newState;
    }
}
@Singleton
@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@Lock(LockType.READ)
class SingletonBean5 {
        private String status;

        public String getStatus() {
            return status;
        }
        @Lock(LockType.WRITE)
        public void setStatus(String newStatus) {
            status = newStatus;
        }
}
@ConcurrencyManagement(ConcurrencyManagementType.BEAN)
@Singleton
class SingletonBean5 { }
]]>
        </code>
    </test-code>
</test-data>