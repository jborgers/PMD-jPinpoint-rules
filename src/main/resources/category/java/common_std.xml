<ruleset name="jpinpoint-common_std-rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>jPinpoint rule set for performance aware Java coding, sponsored by Rabobank.</description>

    <rule name="AvoidApacheCommonsFileItemNonStreaming"
          language="java"
          message="Avoid memory intensive FileItem.get and FileItem.getString"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          typeResolution="true"
          externalInfoUrl="${doc_root}/JavaCodePerformance.md#isio03">
        <description>
            Problem: Use of FileItem.get and FileItem.getString could exhaust memory since they load the entire file into memory&#13;
            Solution: Use streaming methods and buffering.
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="io,jpinpoint-rule,memory,performance,sustainability-medium" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[@MethodName="get" or @MethodName="getString"][VariableAccess[pmd-java:typeIs('org.apache.commons.fileupload.FileItem')]]
    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
    public class FileStuff {
       private String bad(FileItem fileItem) {
            return fileItem.getString();
       }

       private InputStream good(FileItem fileItem) {
            return fileItem.getInputStream();
       }
    }
                ]]>
        </example>
    </rule>

    <rule name="AvoidCalendarDateCreation"
          language="java"
          message="A Calendar is used to create a Date or DateTime, this is expensive."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          typeResolution="true"
          externalInfoUrl="${doc_root}/JavaCodePerformance.md#ue01">
        <description>Problem: A Calendar is a heavyweight object and expensive to create. &#13;
            Solution: Use 'new Date()', Java 8+ java.time.[Local/Zoned]DateTime.now().
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="cpu,jpinpoint-rule,memory,performance,sustainability-medium" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('java.util.Calendar#getInstance()') or pmd-java:matchesSig('java.util.GregorianCalendar#getInstance()')][ancestor::MethodCall[@MethodName='getTime' or @MethodName='getTimeInMillis']]
|
//MethodCall[@MethodName='getTime' or @MethodName='getTimeInMillis'][VariableAccess[pmd-java:typeIs('java.util.Calendar')]]
|
//ConstructorCall/ClassType[pmd-java:typeIs('org.joda.time.DateTime')]/../ArgumentList//MethodCall[pmd-java:matchesSig('java.util.Calendar#getInstance()') or pmd-java:matchesSig('java.util.GregorianCalendar#getInstance()')]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
public class DateStuff {
    private Date bad1() {
        return Calendar.getInstance().getTime(); // now
    }
    private Date good1a() {
        return new Date(); // now
    }
    private LocalDateTime good1b() {
        return LocalDateTime.now();
    }
    private long bad2() {
        return Calendar.getInstance().getTimeInMillis();
    }
    private long good2() {
        return System.currentTimeMillis();
    }
}
            ]]>
        </example>
    </rule>

    <rule name="AvoidConcatInLoop"
          language="java"
          message="A String is concatenated in a loop. Use StringBuilder.append."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          typeResolution="true"
          externalInfoUrl="${doc_root}/JavaCodePerformance.md#isu02">
        <description>A String is built in a loop by concatenation. Problem: Each statement with one or more +-operators creates a hidden temporary StringBuilder, a char[] and a new String object, which all have to be garbage collected. &#13;
            Solution: Use the StringBuilder append method.
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="cpu,jpinpoint-rule,performance,sustainability-medium" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
(//ForStatement | //ForeachStatement | //WhileStatement | //DoStatement)//AssignmentExpression[
    (: a += ...;  - a being a string OR a = ... + a + ...; - a being a string :)
    @Operator = '+=' or (@Operator = '=' and ./InfixExpression[@Operator="+"])
]/VariableAccess[pmd-java:typeIs('java.lang.String')]
/.. (: Go up to report on the StatementExpression :)
	]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
public class StringStuff {
   private String bad(String arg) {
        String log = "";
        List<String> values = Arrays.asList("tic ", "tac ", "toe ");
        for (String val : values) {
            log += val;
        }
        return log;
    }

   private String good(String arg) {
        StringBuilder sb = new StringBuilder();
        List<String> values = Arrays.asList("tic ", "tac ", "toe ");
        for (String val : values) {
            sb.append(val);
        }
        return sb.toString();
   }
}
            ]]>
        </example>
    </rule>

    <rule name="AvoidConcatInAppend"
          language="java"
          message="Concatenation inside append. Use extra append."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          typeResolution="true"
          externalInfoUrl="${doc_root}/JavaCodePerformance.md#isu04">
        <description>Concatenation of Strings is used inside an StringBuilder.append argument. Problem: Each statement with one or more +-operators creates a hidden temporary StringBuilder, a char[] and a new String object, which all have to be garbage collected.&#13;
            Solution: Use an extra fluent append instead of concatenation.
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="cpu,jpinpoint-rule,performance,sustainability-low" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
//(ReturnStatement|ExpressionStatement|LocalVariableDeclaration)
[.//MethodCall[pmd-java:matchesSig('java.lang.StringBuilder#append(java.lang.String)') or pmd-java:matchesSig('java.lang.StringBuffer#append(java.lang.String)')]
  //ArgumentList[./InfixExpression[@Operator="+"]
     /*[pmd-java:typeIs('java.lang.String')][count(..//VariableAccess) > 0
        and not(..//VariableAccess/@Name = ancestor::ClassBody//VariableId[@Final=true()]/@Name)]]
]
	]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[
public class StringStuff {
   private String bad(String arg) {
        StringBuilder sb = new StringBuilder();
        sb.append("arg='" + arg + "'");
        return sb.toString();
   }

   private String good(String arg) {
        StringBuilder sb = new StringBuilder();
        sb.append("arg='").append(arg).append("'");
        return sb.toString();
   }
}
            ]]>
        </example>
    </rule>

    <rule name="LimitWildcardStaticImports"
          language="java"
          message="The number of static imports with a wildcard should be limited"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          typeResolution="true"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr01">
        <description>Importing a class statically allows you to use its public static members easily: without qualifying them with the class name. Problem: if you import too many classes statically, your code can become confusing and difficult to maintain. The default maximum = 3.
            Solution: Import class members individually.
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="confusing,jpinpoint-rule,pitfall,replaces-sonar-rule" type="String" description="classification"/>
            <property name="param-max" value="3" type="String" description="Maximum number of allowed static imports with wildcard"/>
            <property name="xpath">
                <value><![CDATA[
//ImportDeclaration[@Static=true() and @ImportOnDemand=true()][position() > number($param-max)]
	]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
// With the default threshold value: 3

import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.co.division.Constants.*;
import static com.co.department.Constants.*;  // bad

import static com.co.corporate.Constants.NUTS;
import static com.co.corporate.Constants.CRAZY;
import static com.co.corporate.Constants.FOOLISH;
import static com.co.corporate.Constants.AWESOME; // good
import static com.co.corporate.Constants.GREAT; // good

            ]]>
        </example>
    </rule>

    <rule name="LetFieldsMeetSerializable"
          language="java"
          message="Fields in a Serializable class should be serializable or transient."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr02">
        <description>Problem: Field in a Serializable class is not serializable nor transient. When (de)serialization happens, a RuntimeException will be thrown and (de)serialization fails.
            Solution: make the field either transient, make its class implement Serializable or interface extend Serializable.
            Note: Classes extending Throwable do, by inheritance, implement Serializable, yet are excluded in this rule, since they are typically never actually serialized.
            An exception to this exception is when extending RemoteException, then fields should be transient or serializable.
        </description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="jpinpoint-rule,pitfall,replaces-sonar-rule" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
//ClassDeclaration[pmd-java:typeIs('java.io.Serializable')
(: Throwable is the exception, except RemoteException :)
and not(pmd-java:typeIs('java.lang.Throwable') and not(pmd-java:typeIs('java.rmi.RemoteException')))]
(: non-transient, non-static, non-primitive fields :)
//FieldDeclaration[not(pmd-java:modifiers() = ('transient', 'static'))]
[not(.//PrimitiveType)]
[ClassType[not(pmd-java:typeIs('java.io.Serializable'))]]
(: and can be resolved :)
[ClassType[pmd-java:typeIs('java.lang.Object')]]
(: if has type args, type args which are not serializable like List<String, Thread>):)
[not(exists(.//TypeArguments))
    or exists(.//TypeArguments/ClassType[not(pmd-java:typeIs('java.io.Serializable'))
                                         (: and can be resolved :)
                                         and pmd-java:typeIs('java.lang.Object')]
    )
]                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[
class Foo implements Serializable {
    String meets;
    Exception exMeets;
    Serializable ser;
    Thread t1NotMeets; // bad, Thread is not serializable
    transient Thread t2meets;
    List<String> listOfStrings = new ArrayList();
    List<Thread> listOfThreads = new ArrayList(); // bad
    Map<String,String> mapToString = new HashMap();
    Map<String,Thread> mapToThread = new HashMap(); //bad
}

class Bar extends Exception {
    Thread t1NotMeets;
    transient Thread t2meets;
}

class Baz extends RemoteException {
    Thread t1NotMeets; // bad
    transient Thread t2meets;
}
            ]]>
        </example>
    </rule>

    <rule name="LimitStatementsInLambdas"
          language="java"
          message="Avoid many statements in lambda expressions."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr03">
        <description>Problem: lambda expressions with many statements are hard to understand and maintain.
            Solution: extract the lambda expression code block into one or more well-named separate method(s).
        </description>
        <priority>3</priority>
        <properties>
            <property name="tags" value="brain-overload,jpinpoint-rule,replaces-sonar-rule" type="String" description="classification"/>
            <property name="param-max" value="5" type="String" description="Maximum number of allowed non-setter statements"/>
            <property name="xpath">
                <value><![CDATA[
(: number of statements should be limited, setters are ignored. Chained methods are one statement :)
//LambdaExpression/Block[count(.//*[pmd-java:nodeIs('Statement')]) - count(.//EmptyStatement) - count(.//ExpressionStatement/MethodCall[starts-with(@MethodName,'set')]) > number($param-max)]
                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[
class Foo {
       void bar(List additionals) {
            additionals.forEach(entity -> {
                if (entity.getKNr() != null) {
                    action.withActions(
                            new Action().withFoId(actionFoId.incrementAndGet())
                                    .withEntityPlanFoId(1)
                                    .withEntity(mapLogicType(true))
                    );
                }
            });
       }

       void baz(List additionals) {
            additionals.forEach(entity -> {         // bad, too many statements (5)
                if (entity.getKNr() != null) {
                    action.withActions(
                            new Action().withFoId(actionFoId.incrementAndGet())
                                    .withEntityPlanFoId(1)
                                    .withEntity(mapLogicType(true))
                    );
                }
                else { action.withActions(new Action().withFoId(0)); }
            });
        }
}
            ]]>
        </example>
    </rule>

    <rule name="LimitNestingInLambdas"
          language="java"
          message="Avoid deep nesting of lambdas in lambda expressions."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr05">
        <description>Problem: lambda expressions with deep nesting (lambda's in lambda's) are hard to understand and maintain.
            Solution: extract the lambda expression code block(s) into one or more well-named separate method(s).
            Note: A violation when the depth of lambda-with-code-block nesting exceeds (by default) 1,
            or the depth of lambda-single-expression in lambda nesting exceeds (by default) 4.
        </description>
        <priority>3</priority>
        <properties>
            <property name="tags" value="brain-overload,jpinpoint-rule,replaces-sonar-rule" type="String" description="classification"/>
            <property name="param-block-max" value="1" type="String" description="Maximum allowed depth of lambda-with-code-block nesting"/>
            <property name="param-single-max" value="4" type="String" description="Maximum allowed depth of lambda-single-expression nesting"/>
            <property name="xpath">
                <value><![CDATA[
//LambdaExpression[Block][count(ancestor::LambdaExpression/Block) > number($param-block-max)]
|
//LambdaExpression[*[@Expression=true()]][count(ancestor::LambdaExpression) > number($param-single-max)]
                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[
class Foo {
    public Object singleExpressionLambdas(String a, String b) {
        return detect(a)
                .orElseGet(() -> single0(b)
                .orElseGet(() -> single1(b) // single nesting level 1
                .orElseGet(() -> single2(b)//   2
                .orElseGet(() -> single3(b)//   3
                .orElseGet(() -> singlet4(b)//  4
                .orElseGet(() -> single5(b)//  5 // bad
                .orElseGet(() -> single6(b))))))));//  6 // bad
    }

   public Object blockLambdas(String a, String b) {
        return detect(a)
                .orElseGet(() -> single0(b)
                .orElseGet(() -> {block0(b) // block nesting level 0
                .orElseGet(() -> {block1(b)//  1
                .orElseGet(() -> {block2(b)//  2 // bad
                .orElseGet(() -> single4(b)//  single nesting level 4 // good
                .orElseGet(() -> single5(b)));});});}));//  single nesting level 5, bad
    }
}
            ]]>
        </example>
    </rule>

    <rule name="AvoidForEachInStreams"
          language="java"
          message="Prefer side-effect-free functions in streams, use forEach only for logging."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#ils01">
        <description>Problem: Streams is a paradigm based on functional programming: the result should depend only on its input and not update any state.
            Use of forEach is actually iterative code masquerading as streams code. It is typically harder to read and less maintainable than the iterative form.
            Solution: Use the for-each (enhanced-for) loop, or the pure functional form. The forEach operation should only be used to report (i.e. log) the result of a stream computation.
        </description>
        <priority>4</priority>
        <properties>
            <property name="tags" value="bad-practice,jpinpoint-rule" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
(: should match java.lang.Stream#forEach(java.util.function.Consumer) but also others like java.util.stream.IntStream#forEach(java.util.function.IntConsumer) :)
//MethodCall[pmd-java:matchesSig('java.util.stream.BaseStream#forEach(_)')]
[ArgumentList[not(
    .//LambdaExpression[
        (: if a lambda expression in a foreach has expression statements, they should all be logging :)
        count(.//ExpressionStatement) > 0
        and count(.//ExpressionStatement) = count(
            .//ExpressionStatement/MethodCall[
                (: supported logger libs :)
                VariableAccess[pmd-java:typeIs('org.slf4j.Logger')
                or pmd-java:typeIs('java.util.logging.Logger')
                or pmd-java:typeIs('org.apache.commons.logging.Log')
            ]
            (: Slfj4 annotation makes the log variable AmbiguousName as there is no explicit log field :)
            or (AmbiguousName[@Name='log'] and ancestor::ClassDeclaration[pmd-java:hasAnnotation('lombok.extern.slf4j.Slf4j')])]
        ) + count(.//ExpressionStatement/MethodCall[starts-with(@MethodName,'log')])
    ]
    (: if a foreach has a method reference, it should be only for logging :)
    or .//MethodReference[
        (TypeExpression/ClassType[pmd-java:typeIs('lombok.extern.java.Log')]
            (: supported logger libs :)
            or VariableAccess[pmd-java:typeIs('org.slf4j.Logger')
            or pmd-java:typeIs('java.util.logging.Logger')
            or pmd-java:typeIs('org.apache.commons.logging.Log')]
            (: Slfj4 annotation makes the log variable AmbiguousName as there is no explicit log field :)
            or (AmbiguousName[@Name='log'] and ancestor::ClassDeclaration[pmd-java:hasAnnotation('lombok.extern.slf4j.Slf4j')])
        ) or starts-with(@MethodName,'log')]
)]]
                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[
        List<String> letters = List.of("D", "O", "G", "E");
        Map<String, String> map = new HashMap<>();

        // forEach in stream, bad
        letters.stream().forEach(l -> map.put(l, 0)); // bad, side effect, modifies map

        // pure functional form, good
        map = letters.stream().collect(toMap(l -> l, v -> 0));

        // reporting result by logging, good
        letters.stream().forEach(Log::info);

        // external iterative form, meant for modifying state, good
        for (String l : letters) {
            map.put(l, 0);
        }

        // internal iterator, fine for modifying state, good
        letters.forEach(l -> map.put(l, 0));
            ]]>
        </example>
    </rule>

    <rule name="AvoidUnusedAssignments"
          language="java"
          message="Avoid assignments for which the assigned value is never used."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          externalInfoUrl="${doc_root}/JavaCodeQuality.md#isr04">
        <description>Problem: Assignments to variables for which the assigned value is not used because a new value is assigned before actual use, is unnecessary work and may indicate a bug.
            Solution: remove the first assignment and make sure that is as intended.
        </description>
        <priority>3</priority>
        <properties>
            <property name="tags" value="jpinpoint-rule,replaces-sonar-rule,suspicious,unused" type="String" description="classification"/>
            <property name="xpath">
                <value><![CDATA[
(: local var declaration with following assignment same var :)
//Block//LocalVariableDeclaration[
    .//VariableId/@Name = following::ExpressionStatement/AssignmentExpression/VariableAccess/@Name
    and not(.//VariableId/@Name = (following::LocalVariableDeclaration//MethodCall/VariableAccess)/@Name)
    and not(.//VariableId/@Name = (preceding-sibling::ExpressionStatement//ArgumentList/VariableAccess)/@Name)
]
,
(: assigment with following other assignment same var :)
//Block//ExpressionStatement/AssignmentExpression[
    .//VariableAccess/@Name = following::ExpressionStatement/AssignmentExpression/VariableAccess/@Name
    and not(.//VariableAccess/@Name = (following::LocalVariableDeclaration//MethodCall/VariableAccess)/@Name)
    and not(.//VariableAccess/@Name = (preceding-sibling::ExpressionStatement//ArgumentList/VariableAccess)/@Name)
]
                ]]></value>
            </property>
        </properties>
        <example>
            <![CDATA[

            ]]>
        </example>
    </rule>

</ruleset>