<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="jpinpoint-sql-rules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0">
    <description>jPinpoint rule set for performance aware Java coding, sponsored by Rabobank.</description>

    <rule name="AvoidHugeQueryFetchSize"
          message="Avoid a huge query fetch size, it consumes much memory."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          language="java"
          externalInfoUrl="${doc_root}/JavaDataAccessPerformance.md#ida-trm03">
        <description>
            Problem: if huge numbers of result rows are fetched these are all stored in memory and this may introduce long gc times and out of memory risk.&#13;
            Solution: Set fetch size to 100 maximally. Only set it higher than 100 yet still max 500, if you are sure there is only little data returned per row, for instance 3 rather short columns.
            (jpinpoint-rules)</description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="jpinpoint-rule,memory,performance,sustainability-medium" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[
    pmd-java:matchesSig('java.sql.Statement#setFetchSize(int)')
    or pmd-java:matchesSig('org.hibernate.Query#setFetchSize(int)') (:hibernate <6 :)
    or pmd-java:matchesSig('org.hibernate.query.Query#setFetchSize(int)') (:hibernate 6 :)
    or pmd-java:matchesSig('org.apache.openjpa.persistence.jdbc.JDBCFetchPlan#setFetchBatchSize(int)')
]/ArgumentList[
        NumericLiteral[@ValueAsInt > 500]
        or
        VariableAccess/@Name = (ancestor::ClassBody//FieldDeclaration|ancestor::MethodDeclaration)//VariableDeclarator[NumericLiteral[@ValueAsInt > 500]]/VariableId/@Name
]
]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="AvoidMultipleRoundtripsForQuery"
          message="Avoid multiple round trips for the same query"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          language="java"
          externalInfoUrl="${doc_root}/JavaDataAccessPerformance.md#ida-trr05">
        <description>
            Problem: Time is taken by the unnecessary round trip(s). Unnecessary work is performed.&#13;
            Solution: Execute the query only once.
            (jpinpoint-rules)</description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="cpu,io,jpinpoint-rule,performance,sustainability-medium" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('javax.persistence.Query#getSingleResult()') or pmd-java:matchesSig('jakarta.persistence.Query#getSingleResult()')][
    ancestor::MethodDeclaration[
        count(.//MethodCall[@MethodName='createQuery']) = 1
        and count(.//MethodCall[@MethodName='getResultList' or @MethodName='getSingleResult']) > 1
    ]
]
]]>
                </value>
            </property>
        </properties>
    </rule>


    <rule name="AvoidSqlInExpression"
          message="Avoid a SQL IN-Expression, it fails for > 1000 arguments and pollutes the query plan cache / statement cache"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule" dfa="false" language="java"
          typeResolution="true" externalInfoUrl="${doc_root}/JavaDataAccessPerformance.md#ida-ino01">
        <description>
            Problem: The number of values for the IN-argument list is limited, in Oracle to 1000. An error occurs when exceeding this limit. Additionally, a large IN list takes much time to transport to the database and be parsed. Moreover, each number of IN values used in a query results in a separate cache entry in e.g. the Prepared Statement Cache of the application server and in the Hibernate Query Plan Cache, resulting in higher memory usage and/or low cache hit ratio.&#13;
            Solution: Rewrite the query by replacing the IN-argument list by a sub query using the criteria used to fetch the IN arguments. Or often even better performing, an inner join using these criteria (depending on indexes etc. - recommended to test to be sure.) This way, the select and update are combined into one, which will also save one roundtrip.
            (jpinpoint-rules)</description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="jpinpoint-rule,performance" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[(
        @MethodName='in' and (
            ./TypeExpression[pmd-java:typeIs('org.hibernate.criterion.Restrictions')]
            or ./VariableAccess[pmd-java:typeIs('javax.persistence.criteria.CriteriaBuilder') or pmd-java:typeIs('jakarta.persistence.criteria.CriteriaBuilder')]
        )
    )
    or pmd-java:matchesSig('javax.persistence.criteria.Expression#in(_*)')
    or pmd-java:matchesSig('jakarta.persistence.criteria.Expression#in(_*)')
    or pmd-java:matchesSig('org.apache.openjpa.persistence.query.Expression#in(_*)')
    or pmd-java:matchesSig('org.hibernate.CriteriaBuilder#in(_*)')
    or pmd-java:matchesSig('org.hibernate.criterion.Restrictions#in(_*)')
][
    (: in with a subquery is a solution :)
    not(ancestor::ArgumentList//MethodCall[@MethodName='value']/ArgumentList/VariableAccess[
        pmd-java:typeIs('javax.persistence.criteria.Subquery') or pmd-java:typeIs('jakarta.persistence.criteria.Subquery')
    ])
]
|
//ClassDeclaration[pmd-java:hasAnnotation('javax.persistence.NamedQueries') or pmd-java:hasAnnotation('jakarta.persistence.NamedQueries')]
//Annotation[@SimpleName='NamedQueries']//StringLiteral[matches(@ConstValue, '\s+(IN|in)\s*\(?\s?:\w+')]
|
//StringLiteral[matches(@ConstValue, '\s+(IN|in)\s*\(?\s?:\w+')][
    replace(@ConstValue, '^.+\s+(IN|in)\s*\(?\s?:(\w+).*$', '$2')
    =
    ancestor::MethodDeclaration//MethodCall[
        pmd-java:matchesSig('javax.persistence.Query#setParameter(_*)') or pmd-java:matchesSig('jakarta.persistence.Query#setParameter(_*)')
    (: Arrays.asList is typically used with just a few parameter values, so no problem :)
    ]/ArgumentList[not(./MethodCall[pmd-java:matchesSig('java.util.Arrays#asList(_*)')])]/StringLiteral/@ConstValue
]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
    private void bad(CriteriaQuery cq, Root<Customer> cust) {
        cq.select(cust).where(cust.get("postalCode").in(codes)); // bad
    }
    private void good(CriteriaBuilder builder, CriteriaQuery cq, Root<Customer> cust, SubQuery<PostalCode> subquery) {
        cq.select(cust).where(builder.in(cust.get("postalCode")).value(subquery));
    }
            ]]>
        </example>
    </rule>

    <rule name="AvoidFetchingWholeList"
          message="Avoid fetching the whole list of entities for the query, while only one entity is used"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          language="java"
          externalInfoUrl="${doc_root}/JavaDataAccessPerformance.md#ida-trr04">
        <description>
            Problem: Unused rows are fetched and transported, and unused jdbc buffer is allocated.&#13;
            Solution: Use query.getSingleResult() in stead of query.getResultList().
            (jpinpoint-rules)</description>
        <priority>2</priority>
        <properties>
            <property name="tags" value="cpu,io,jpinpoint-rule,memory,performance,sustainability-high" type="String" description="classification"/>
            <property name="xpath">
                <value>
                    <![CDATA[
(: if getResultList is used to fetch entities and entities(0) is returned :)
//ReturnStatement//MethodCall[pmd-java:matchesSig('java.util.List#get(int)')][./ArgumentList/NumericLiteral[@ValueAsInt=0]]/VariableAccess[
    @Name = ancestor::MethodDeclaration//VariableDeclarator[
        MethodCall[pmd-java:matchesSig('javax.persistence.TypedQuery#getResultList()') or pmd-java:matchesSig('jakarta.persistence.TypedQuery#getResultList()')]
    ]/VariableId/@Name
    and not(
        (: not when also another elem of entities is used in the method :)
        @Name = ancestor::MethodDeclaration//MethodCall[pmd-java:matchesSig('java.util.List#get(int)')][./ArgumentList/NumericLiteral[@ValueAsInt!=0]]/VariableAccess/@Name
        or
        (: not when also the whole list of entities is returned :)
        @Name = ancestor::MethodDeclaration//ReturnStatement//(ConditionalExpression|.)/VariableAccess[not(parent::MethodCall)]/@Name
    )
]
]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
    public SomeEntity findByQueryBad(TypedQuery<Object> query) {
        final List<SomeEntity> entities = query.getResultList();
        return !entities.isEmpty() ? entities.get(0) : null;
    }
    public SomeEntity findByQueryGood(TypedQuery<Object> query) throws NoResultException {
        return query.getSingleResult();
    }
            ]]>
        </example>
    </rule>

</ruleset>